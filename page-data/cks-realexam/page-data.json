{"componentChunkName":"component---src-templates-blog-template-js","path":"/cks-realexam/","result":{"data":{"cur":{"id":"6ba28fdb-86c6-56bc-9db8-767daf9080bd","html":"<ul>\n<li>TLS 관련 문제 바로 스킵</li>\n<li>Falco 문제는 배점이 11점이었는데 falco에서 아무 로그가 안 잡혀서 못품;;</li>\n<li>무슨 image scanner 관련된 문제가 있었는데 (kubesec아니고,,) 못품. 아마 admission controller, webhook 관련 문제였던 것 같다.</li>\n<li>kubelet에서 authorization mode를 alwaysAllow로 되어 있던 걸 Webhook으로 수정했어야 하는데 kubernetes.io에 레퍼런스를 못찾아서 ‘Deny’라고 잘못 품\n<ul>\n<li>도큐먼트에서 ‘kubelet’으로 검색하니깐 찾을 수 있음.</li>\n</ul>\n</li>\n</ul>","excerpt":"TLS 관련 문제 바로 스킵 Falco 문제는 배점이 11점이었는데 falco에서 아무 로그가 안 잡혀서 못품;; 무슨 image scanner 관련된 문제가 있었는데 (kubesec아니고,,) 못품. 아마 admission controller, webhook 관련 문제였던 것 같다. kubelet에서 authorization mode를 alwaysAllow로 되어 있던 걸 Webhook으로 수정했어야 하는데 kubernetes.io에 레퍼런스를 못찾아서 ‘Deny’라고 잘못 품 도큐먼트에서 ‘kubelet’으로 검색하니깐 찾을 수 있음.","frontmatter":{"date":"November 15, 2023","title":"[CKS] Realexam","categories":"DevOps","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/cks-realexam/"}},"next":{"id":"7eeeb463-9477-5df0-b725-3ed3c90e9682","html":"<h2 id=\"q1\" style=\"position:relative;\"><a href=\"#q1\" aria-label=\"q1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q1.</h2>\n<p>You have access to multiple clusters from your main terminal through kubectl contexts. Write all context names into /opt/course/1/contexts, one per line.</p>\n<p>From the kubeconfig extract the certificate of user restricted@infra-prod and write it decoded to /opt/course/1/cert.</p>\n<h2 id=\"q1-정답\" style=\"position:relative;\"><a href=\"#q1-%EC%A0%95%EB%8B%B5\" aria-label=\"q1 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q1 정답</h2>\n<ul>\n<li>File /opt/course/1/contexts 가 모든 context를 포함하고 있는가\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">k config get-contexts <span class=\"token parameter variable\">-o</span> name <span class=\"token operator\">></span> /opt/course/1/contexts</code></pre></div>\n</li>\n<li>File /opt/course/1/cert 가 cert를 포함하고 있는가\n<ul>\n<li>kubeconfig 파일의 cluster가 아닌 restricted@infra-prod의 user 의 cert내용을 base64 -d로 디코드하여 /opt/course/1/cert에 저장</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q2\" style=\"position:relative;\"><a href=\"#q2\" aria-label=\"q2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2</h3>\n<p>Falco is installed with default configuration on node cluster1-node1. Connect using ssh cluster1-node1. Use it to:</p>\n<ul>\n<li>Find a Pod running image nginx which creates unwanted package management processes inside its container.</li>\n<li>Find a Pod running image httpd which modifies /etc/passwd.</li>\n</ul>\n<p>Save the Falco logs for case 1 under /opt/course/2/falco.log in format:\n<code class=\"language-text\">time-with-nanosconds,container-id,container-name,user-name</code>\nNo other information should be in any line. Collect the logs for at least 30 seconds.\nAfterwards remove the threads (both 1 and 2) by scaling the replicas of the Deployments that control the offending Pods down to 0.</p>\n<h3 id=\"q2-정답\" style=\"position:relative;\"><a href=\"#q2-%EC%A0%95%EB%8B%B5\" aria-label=\"q2 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2 정답</h3>\n<ul>\n<li>/opt/course/2/falco.log 존재하고 정확한 로그 포맷을 가지고 있어야 함\n<ul>\n<li>먼저 /etc/falco/falco.yaml을 살펴보면 syslog에 falco의 로그가 저장되고 있음을 확인할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">syslog_output:\n  enabled: true</code></pre></div>\n<ul>\n<li>따라서 /var/log/syslog 또는 journalctl -fu falco를 통해서 stdout으로 로그를 확인할 수 있다. 로그에서 확인된 문제가 되는 컨테이너 id를 찾는다.</li>\n<li><code class=\"language-text\">crictl pods -id 7a864406b9794</code> 명령으로 1,2번 컨테이너가 기동 중인 pod에 대한 정보를 얻는다.</li>\n<li>falco rule을 수정하여 문제의 포맷으로 로그가 나타나게 만들고, 나타나는 로그를 복사&#x26;붙여넣기로 로컬의 /opt/cousre/2/falco.log에 저장한다.</li>\n</ul>\n</li>\n<li>1번 deployment scaled down\n<ul>\n<li><code class=\"language-text\">k -n team-blue scale deploy webapi --replicas 0</code></li>\n</ul>\n</li>\n<li>2번 deployment scaled down\n<ul>\n<li><code class=\"language-text\">k -n team-purple scale deploy rating-service --replicas 0</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q3\" style=\"position:relative;\"><a href=\"#q3\" aria-label=\"q3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q3</h3>\n<p>You received a list from the DevSecOps team which performed a security investigation of the k8s cluster1 (workload-prod). The list states the following about the apiserver setup:</p>\n<p>Accessible through a NodePort Service\nChange the apiserver setup so that:</p>\n<p>Only accessible through a ClusterIP Service</p>\n<h3 id=\"q3-정답\" style=\"position:relative;\"><a href=\"#q3-%EC%A0%95%EB%8B%B5\" aria-label=\"q3 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q3 정답</h3>\n<ul>\n<li>kube-apiserver의 yaml파일에서 아래 행을 주석 또는 삭제 처리 ( 수정 전 백업 필수 )\n<ul>\n<li>—kubernetes-service-node-port=31000</li>\n</ul>\n</li>\n<li>위 설정 후에도 <code class=\"language-text\">k delete svc kubernetes</code>를 해주어야 ClusterIP 타입으로 서비스가 재성성되게 된다.</li>\n</ul>\n<h3 id=\"q4\" style=\"position:relative;\"><a href=\"#q4\" aria-label=\"q4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q4</h3>\n<p>There is Deployment container-host-hacker in Namespace team-red which mounts /run/containerd as a hostPath volume on the Node where it’s running. This means that the Pod can access various data about other containers running on the same Node.</p>\n<p>To prevent this configure Namespace team-red to enforce the baseline Pod Security Standard. Once completed, delete the Pod of the Deployment mentioned above.</p>\n<p>Check the ReplicaSet events and write the event/log lines containing the reason why the Pod isn’t recreated into /opt/course/4/logs.</p>\n<h3 id=\"q4-정답\" style=\"position:relative;\"><a href=\"#q4-%EC%A0%95%EB%8B%B5\" aria-label=\"q4 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q4 정답</h3>\n<ul>\n<li>namespace label 설정\n<ul>\n<li>k edit ns team-red 해서 <code class=\"language-text\">pod-security.kubernetes.io/enforce: baseline # add</code> 추가</li>\n</ul>\n</li>\n<li>pod delete\n<ul>\n<li>k -n team-red delete pod container-host-hacker-dbf989777-wm8fc</li>\n</ul>\n</li>\n<li>/opt/course/4/log에 event log 저장\n<ul>\n<li>pod가 delete되면 rs가 다시 pod를 생성해주는데, 이게 왜 fail하는 지는 rs를 살펴봄으로써 알 수 있다.\n<ul>\n<li>k -n team-red describe rs container-host-hacker-dbf989777</li>\n</ul>\n</li>\n<li>위 describe의 결과 중 <code class=\"language-text\">Events:</code>절의 내용을 /opt/course/4/logs에 저장한다.\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Warning  FailedCreate      2m2s (x9 over 2m40s)  replicaset-controller  (combined from similar events): Error creating: pods \"container-host-hacker-dbf989777-kjfpn\" is forbidden: violates PodSecurity \"baseline:latest\": hostPath volumes (volume \"containerdata\")</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q5--kube-bench-문제로-하라는-대로-하면-됨\" style=\"position:relative;\"><a href=\"#q5--kube-bench-%EB%AC%B8%EC%A0%9C%EB%A1%9C-%ED%95%98%EB%9D%BC%EB%8A%94-%EB%8C%80%EB%A1%9C-%ED%95%98%EB%A9%B4-%EB%90%A8\" aria-label=\"q5  kube bench 문제로 하라는 대로 하면 됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q5 : Kube-bench 문제로 하라는 대로 하면 됨</h3>\n<h3 id=\"q6\" style=\"position:relative;\"><a href=\"#q6\" aria-label=\"q6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q6</h3>\n<ul>\n<li>아래 명령들을 이용해서 어떤 binary가 문제가 되는 지 찾으면 된다. 한 letter만 다른 경우가 있을 수 있으니 반드시 uniq 사용하기\n<ul>\n<li><code class=\"language-text\">sha512sum {binary file}</code></li>\n<li><code class=\"language-text\">cat {file} | uniq</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q7\" style=\"position:relative;\"><a href=\"#q7\" aria-label=\"q7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q7</h3>\n<p>The Open Policy Agent and Gatekeeper have been installed to, among other things, enforce blacklisting of certain image registries. Alter the existing constraint and/or template to also blacklist images from very-bad-registry.com.</p>\n<p>Test it by creating a single Pod using image very-bad-registry.com/image in Namespace default, it shouldn’t work.</p>\n<p>You can also verify your changes by looking at the existing Deployment untrusted in Namespace default, it uses an image from the new untrusted source. The OPA contraint should throw violation messages for this one.</p>\n<h3 id=\"q7-정답\" style=\"position:relative;\"><a href=\"#q7-%EC%A0%95%EB%8B%B5\" aria-label=\"q7 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q7 정답</h3>\n<ul>\n<li>gatekeeper의 crd를 살펴보기\n<ul>\n<li>k get crd</li>\n</ul>\n</li>\n<li>이 중에 constraint만 따로 조회하기\n<ul>\n<li>k get constraint</li>\n<li>그리고 그중에 blacklisting image와 관련이 있을 것 같은 constraint에 대해 살펴본다.\n<ul>\n<li>k edit blacklistimages pod-trusted-images\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> constraints.gatekeeper.sh/v1beta1\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> BlacklistImages\n  <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">match</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kinds</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token key atrule\">kinds</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> Pod</code></pre></div>\n</li>\n</ul>\n</li>\n<li>살펴보면 모든 pod에 적용되게 되어 있으므로 constraintTemplate을 열고 수정한다.\n<ul>\n<li><code class=\"language-text\">not startswith(image, \"very-bad-registry.com/\")</code> 이 행을 rego에 추가</li>\n<li>k edit constrainttemplates blacklistimages\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> templates.gatekeeper.sh/v1beta1\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConstraintTemplate\n  <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">crd</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">names</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> BlacklistImages\n    <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">rego</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        package k8strustedimages</span>\n\n        images <span class=\"token punctuation\">{</span>\n          image <span class=\"token punctuation\">:</span>= input.review.object.spec.containers<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span>.image\n          not startswith(image<span class=\"token punctuation\">,</span> \"docker<span class=\"token punctuation\">-</span>fake.io/\")\n          not startswith(image<span class=\"token punctuation\">,</span> \"google<span class=\"token punctuation\">-</span>gcr<span class=\"token punctuation\">-</span>fake.com/\")\n          not startswith(image<span class=\"token punctuation\">,</span> \"very<span class=\"token punctuation\">-</span>bad<span class=\"token punctuation\">-</span>registry.com/\") <span class=\"token comment\"># ADD THIS LINE</span>\n        <span class=\"token punctuation\">}</span>\n\n        violation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token key atrule\">\"msg\"</span><span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n          not images\n          msg <span class=\"token punctuation\">:</span>= \"not trusted image<span class=\"token tag\">!</span>\"\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> admission.k8s.gatekeeper.sh</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>이제 <code class=\"language-text\">k run opa-test --image=very-bad-registry.com/image</code> 로 테스트해보면 OPA에서 막히는 걸 확인할 수 있다.</li>\n</ul>\n<h3 id=\"q8--secure-k8s-dashboard\" style=\"position:relative;\"><a href=\"#q8--secure-k8s-dashboard\" aria-label=\"q8  secure k8s dashboard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q8 : Secure K8S dashboard</h3>\n<p>The Kubernetes Dashboard is installed in Namespace kubernetes-dashboard and is configured to:</p>\n<p>Allow users to “skip login”\nAllow insecure access (HTTP without authentication)\nAllow basic authentication\nAllow access from outside the cluster\nYou are asked to make it more secure by:</p>\n<p>Deny users to “skip login”\nDeny insecure access, enforce HTTPS (self signed certificates are ok for now)\nAdd the —auto-generate-certificates argument\nEnforce authentication using a token (with possibility to use RBAC)\nAllow only cluster internal access</p>\n<h3 id=\"q8-정답\" style=\"position:relative;\"><a href=\"#q8-%EC%A0%95%EB%8B%B5\" aria-label=\"q8 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q8 정답</h3>\n<ul>\n<li>k -n kubernetes-dashboard get pod,svc 로 살펴보기</li>\n<li>service가 NodePort로 expose되어 있는 걸 위에서 확인하고 노드ip확인 후\n<ul>\n<li>curl <a href=\"http://192.168.100.11:32520\">http://192.168.100.11:32520</a> 로 접근됨을 확인 ( 즉, unsecure )</li>\n</ul>\n</li>\n<li>k -n kubernetes-dashboard edit deploy kubernetes-dashboard 하여 secure하게 설정하기\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>namespace=kubernetes<span class=\"token punctuation\">-</span>dashboard  \n          <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>authentication<span class=\"token punctuation\">-</span>mode=token        <span class=\"token comment\"># change or delete, \"token\" is default</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>auto<span class=\"token punctuation\">-</span>generate<span class=\"token punctuation\">-</span>certificates       <span class=\"token comment\"># add</span>\n          <span class=\"token comment\">#- --enable-skip-login=true          # delete or set to false</span>\n          <span class=\"token comment\">#- --enable-insecure-login           # delete</span>\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> kubernetesui/dashboard<span class=\"token punctuation\">:</span>v2.0.3\n          <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> Always\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard</code></pre></div>\n<ul>\n<li>k -n kubernetes-dashboard edit svc kubernetes-dashboard 를 통해 nodePort로 접근되지 않도록 ㅇservice 수정하기\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"> <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clusterIP</span><span class=\"token punctuation\">:</span> 10.107.176.19\n  <span class=\"token key atrule\">externalTrafficPolicy</span><span class=\"token punctuation\">:</span> Cluster   <span class=\"token comment\"># delete</span>\n  <span class=\"token key atrule\">internalTrafficPolicy</span><span class=\"token punctuation\">:</span> Cluster\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32513</span>                <span class=\"token comment\"># delete</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9090</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9090</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> https\n    <span class=\"token key atrule\">nodePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32441</span>                <span class=\"token comment\"># delete</span>\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">443</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n    <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8443</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> kubernetes<span class=\"token punctuation\">-</span>dashboard\n  <span class=\"token key atrule\">sessionAffinity</span><span class=\"token punctuation\">:</span> None\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP                  <span class=\"token comment\"># change or delete</span>\n<span class=\"token key atrule\">status</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">loadBalancer</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q9--apparmor\" style=\"position:relative;\"><a href=\"#q9--apparmor\" aria-label=\"q9  apparmor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q9 : AppArmor</h3>\n<p>Some containers need to run more secure and restricted. There is an existing AppArmor profile located at /opt/course/9/profile for this.</p>\n<p>Install the AppArmor profile on Node cluster1-node1. Connect using ssh cluster1-node1.</p>\n<p>Add label security=apparmor to the Node</p>\n<p>Create a Deployment named apparmor in Namespace default with:</p>\n<ul>\n<li>One replica of image nginx:1.19.2</li>\n<li>NodeSelector for security=apparmor</li>\n<li>Single container named c1 with the AppArmor profile enabled</li>\n</ul>\n<p>The Pod might not run properly with the profile enabled. Write the logs of the Pod into /opt/course/9/logs so another team can work on getting the application running.</p>\n<h3 id=\"q9-정답\" style=\"position:relative;\"><a href=\"#q9-%EC%A0%95%EB%8B%B5\" aria-label=\"q9 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q9 정답</h3>\n<ul>\n<li>이 문제는 mockexam의 AppArmor문제와 크게 다르지 않은데 단지 로컬 환경에서 node1로 profile파일을 옮겨줘야 하기에 scp 명령을 활용하거나 copy&#x26;paste해야 한다.\n<ul>\n<li><code class=\"language-text\">scp /opt/course/9/profile cluster1-node1:~/</code></li>\n</ul>\n</li>\n<li>모든 작업이 끝난 후 로그를 로컬 파일에 저장\n<ul>\n<li>k logs apparmor-85c65645dc-jbch8 > /opt/course/9/logs</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q10--container-runtime-sandbox-gvisor\" style=\"position:relative;\"><a href=\"#q10--container-runtime-sandbox-gvisor\" aria-label=\"q10  container runtime sandbox gvisor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q10 : Container Runtime Sandbox gVisor</h3>\n<p>Team purple wants to run some of their workloads more secure. Worker node cluster1-node2 has container engine containerd already installed and it’s configured to support the runsc/gvisor runtime.</p>\n<p>Create a RuntimeClass named gvisor with handler runsc.</p>\n<p>Create a Pod that uses the RuntimeClass. The Pod should be in Namespace team-purple, named gvisor-test and of image nginx:1.19.2. Make sure the Pod runs on cluster1-node2.</p>\n<p>Write the dmesg output of the successfully started Pod into /opt/course/10/gvisor-test-dmesg.</p>\n<h3 id=\"q10-answer\" style=\"position:relative;\"><a href=\"#q10-answer\" aria-label=\"q10 answer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q10 Answer</h3>\n<ul>\n<li>아래 Runtimeclass 생성 후 apply\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> node.k8s.io/v1\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> RuntimeClass\n  <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gvisor\n  <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> runsc</code></pre></div>\n</li>\n<li>k -n team-purple run gvisor-test —image=nginx:1.19.2 —dry-run=client -o yaml > 10_pod.yaml 를 하여 만들어진 파일 기반으로 2개 행을 아래처럼 추가하여 apply\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">null</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> gvisor<span class=\"token punctuation\">-</span>test\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gvisor<span class=\"token punctuation\">-</span>test\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> team<span class=\"token punctuation\">-</span>purple\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nodeName</span><span class=\"token punctuation\">:</span> cluster1<span class=\"token punctuation\">-</span>node2 <span class=\"token comment\"># add</span>\n  <span class=\"token key atrule\">runtimeClassName</span><span class=\"token punctuation\">:</span> gvisor   <span class=\"token comment\"># add</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx<span class=\"token punctuation\">:</span>1.19.2\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> gvisor<span class=\"token punctuation\">-</span>test\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">dnsPolicy</span><span class=\"token punctuation\">:</span> ClusterFirst\n  <span class=\"token key atrule\">restartPolicy</span><span class=\"token punctuation\">:</span> Always\n<span class=\"token key atrule\">status</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>dmesg 로 pod가 gvisor sandbox가 적용되었는 지 확인 후 output으로 로그 저장한다.\n<ul>\n<li>k -n team-purple exec gvisor-test — dmesg > /opt/course/10/gvisor-test-dmesg₩`</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"q11--secrets-in-etcd\" style=\"position:relative;\"><a href=\"#q11--secrets-in-etcd\" aria-label=\"q11  secrets in etcd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q11 : Secrets in ETCD</h3>\n<p>There is an existing Secret called database-access in Namespace team-green.\nRead the complete Secret content directly from ETCD (using etcdctl) and store it into /opt/course/11/etcd-secret-content. Write the plain and decoded Secret’s value of key “pass” into /opt/course/11/database-password.</p>\n<h3 id=\"q11-정답\" style=\"position:relative;\"><a href=\"#q11-%EC%A0%95%EB%8B%B5\" aria-label=\"q11 정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q11 정답</h3>\n<ul>\n<li>kube-apiserver.yaml 파일에서 etcd 관련된 cert 설정을 찾는다.</li>\n<li>이를 활용하여 etcdctl 명령어를 써서 값을 얻어와야 한다. (kubernetes.io 참고)\n<ul>\n<li>ETCD 는 <code class=\"language-text\">/registry/{type}/{namespace}/{name}</code> 경로에 데이터를 저장한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- ETCDCTL_API=3 etcdctl \\\n--cert /etc/kubernetes/pki/apiserver-etcd-client.crt \\\n--key /etc/kubernetes/pki/apiserver-etcd-client.key \\\n--cacert /etc/kubernetes/pki/etcd/ca.crt get /registry/secrets/team-green/database-access</code></pre></div>\n<ul>\n<li>이 결과를 /opt/course/11/etcd-secret-content에 저장한다.</li>\n<li>위에서 얻은 secret의 결과로부터 password를 base64 decode하여 /opt/course/11/database-password에 저장한다.</li>\n</ul>\n<h3 id=\"q12\" style=\"position:relative;\"><a href=\"#q12\" aria-label=\"q12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q12</h3>\n<p>You’re asked to investigate a possible permission escape in Namespace restricted. The context authenticates as user restricted which has only limited permissions and shouldn’t be able to read Secret values.\n<br>\nTry to find the password-key values of the Secrets secret1, secret2 and secret3 in Namespace restricted. Write the decoded plaintext values into files /opt/course/12/secret1, /opt/course/12/secret2 and /opt/course/12/secret3.</p>","frontmatter":{"date":"November 14, 2023","title":"[CKS] Killer shell","categories":"DevOps","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/cks-killershell/"}},"prev":{"id":"ab4f7141-fb9a-569f-9981-99fdf7a64004","html":"<p>VM이 갑자기 재기동 되어 k8s 클러스터를 복구하였으나, redis가 재기동되지 않아서 <code class=\"language-text\">journalctl -xe</code> 명령으로 로그를 확인해보니</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type=1400 audit(1700663555.037:17): avc:  denied ....</code></pre></div>\n<p>와 같은 오류가 출력되었다. 이는 SELinux의 audit 정책과 관련된 이슈이고, SELinux 정책을 off했다가 redis 재기동 후 on을 하는 방식으로 해결하였다.</p>\n<ul>\n<li>정책 off</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo setenforce 0</code></pre></div>\n<ul>\n<li>정책 on</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo setenforce 1</code></pre></div>","frontmatter":{"date":"November 22, 2023","title":"[Error] Redis 기동 실패 : SELinux","categories":"Error","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/error-redis-fail/"}},"site":{"siteMetadata":{"siteUrl":"https://jjunyong.github.io","comments":{"utterances":{"repo":"jjunyong/jjunyong.github.io"}}}}},"pageContext":{"slug":"/cks-realexam/","nextSlug":"/cks-killershell/","prevSlug":"/error-redis-fail/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}