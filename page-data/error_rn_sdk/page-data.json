{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/error_rn_sdk/",
    "result": {"data":{"cur":{"id":"17e74f30-f650-5e9a-8a52-5c1e82a48bda","html":"<ul>\n<li>\n<p>React native 프로젝트에서 npm run android 했을 때 .zshrc에 Android root 설정했음에도 SDK location not found가 나오는 경우,\nproject root/android/에 local.properties 를 생성해서 아래 행을 추가 해주면 된다 .</p>\n</li>\n<li>\n<p>Mac : sdk.dir=/Users/{user_name}/Library/Android/sdk</p>\n</li>\n<li>\n<p>Windows : sdk.dir=c:\\Users{user_name}\\AppData\\Local\\android\\adk</p>\n</li>\n</ul>\n<p>​</p>","excerpt":"React native 프로젝트에서 npm run android 했을 때 .zshrc에 Android root 설정했음에도 SDK location not found가 나오는 경우,\nproject root/android/에 local.properties 를 생성해서 아래 행을 추가 해주면 된다 . Mac : sdk.dir=/Users/{user_name}/Library/Android/sdk Windows : sdk.dir=c:\\Users{user_name}\\AppData\\Local\\android\\adk ​","frontmatter":{"date":"January 26, 2022","title":"[Error] React native SDK location not found","categories":"Error","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/error_rn_sdk/"}},"next":{"id":"1e10306d-ad74-51f7-922a-6baf2f593db1","html":"<ul>\n<li>\n<p>User와 Feed의 다대다 관계 매핑을 위해 ‘Like’라는 이름의 Entity를 만들었는데, like가 MySQL에서 사용하는 예약 키워드이다 보니\nSyntax 에러가 발생했던 것.</p>\n</li>\n<li>\n<p>해결책 : Like 대신 다른 이름을 사용하자. 그리고 엔티티명으로 예약어를 사용하는 것을 조심하자.</p>\n</li>\n<li>\n<p>MySQL 의 예약어들은 아래와 같다.</p>\n</li>\n</ul>\n<p>​</p>","frontmatter":{"date":"January 26, 2022","title":"[Error] JPA MYSQL \"You have an error in you SQL syntax\"","categories":"Error","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/error_jpa_keyword/"}},"prev":{"id":"765d6775-2762-5c68-9380-d540e39b2806","html":"<p>Spring에서 의존관계 주입(Dependency Injection)을 할 때 @Autowired를 사용하여 주입하는 경우가 많은데,\n스프링에서는 아래와 같이 그렇게 하지 말 것을 권고한다.</p>\n<blockquote>\n<p><strong><em>Field injection is not recommended … Always use constructor based dependency injection in your beans</em></strong></p>\n</blockquote>\n<ul>\n<li>DI를 하는 이유는 객체 내부에서 객체를 직접 생성하는 방식 보다 런타임 시 외부에서 생성한 객체를 인터페이스를 통해 넘겨받는 것이 더 느슨한 결합 방식이기 때문이다.</li>\n</ul>\n<h2 id=\"di-방법-3가지\" style=\"position:relative;\"><a href=\"#di-%EB%B0%A9%EB%B2%95-3%EA%B0%80%EC%A7%80\" aria-label=\"di 방법 3가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI 방법 3가지</h2>\n<h3 id=\"1-setter-based-injection-수정자-주입\" style=\"position:relative;\"><a href=\"#1-setter-based-injection-%EC%88%98%EC%A0%95%EC%9E%90-%EC%A3%BC%EC%9E%85\" aria-label=\"1 setter based injection 수정자 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Setter based injection (수정자 주입)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Service</span> service<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Service</span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위와 같이 Setter를 통해 주입하는 방식의 경우 Controller 객체가 생성될 때 반드시 service가 초기화 되지 않아도 되기 때문에, NPE 발생 가능성이 존재한다.</li>\n<li><strong>그리고 생성자 주입과 필드 주입 방식은 ‘객체가 생성되는 시점’에서 순환 참조가 되는 지 여부를 확인할 수 있는 안전장치가 없다는 치명적인 단점도 존재한다.</strong></li>\n</ul>\n<h3 id=\"2-autowired를-통한-field-주입\" style=\"position:relative;\"><a href=\"#2-autowired%EB%A5%BC-%ED%86%B5%ED%95%9C-field-%EC%A3%BC%EC%9E%85\" aria-label=\"2 autowired를 통한 field 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. @Autowired를 통한 Field 주입</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Service</span> service<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>의존하는 레퍼런스 변수에 @Autowired만 붙여주면 되기 때문에 매우 편리하긴 하지만, 수정자 주입이 가지고 있는 문제와 동일한 문제를 가진다.</li>\n</ul>\n<h3 id=\"3-constructor-based-injection생성자-주입\" style=\"position:relative;\"><a href=\"#3-constructor-based-injection%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85\" aria-label=\"3 constructor based injection생성자 주입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Constructor based injection(생성자 주입)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Service</span> service<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Service</span> service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    service<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<blockquote>\n<p>결국 약간 귀찮더라도 Spring에서 생성자릍 통한 의존성 주입을 강력히 권장하는 이유는 에러 관점에서 훨씬 안전한 방식이기 때문이다.\n생성자 주입 방식은 아래와 같은 장점을 지닌다.</p>\n</blockquote>\n<h3 id=\"생성자-주입-방식의-장점\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A3%BC%EC%9E%85-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"생성자 주입 방식의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성자 주입 방식의 장점</h3>\n<ul>\n<li>의존성 주입을 받지 못해 NullPointerException이 뜰 일이 없다.</li>\n<li>의존하는 객체의 변수를 final로 선언할 수 있다.</li>\n<li>순환참조의 오류를 방지할 수 있다.</li>\n</ul>\n<hr>\n<p>참고자료 : <a href=\"https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/\">https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/</a></p>","frontmatter":{"date":"January 28, 2022","title":"[Spring] Autowired가 아닌 생성자 주입을 사용해야 하는 이유","categories":"Spring","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/spring-dependency-injection/"}},"site":{"siteMetadata":{"siteUrl":"https://steadyandslow.com","comments":{"utterances":{"repo":"jjunyong/jjunyong.github.io"}}}}},"pageContext":{"slug":"/error_rn_sdk/","nextSlug":"/error_jpa_keyword/","prevSlug":"/spring-dependency-injection/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}