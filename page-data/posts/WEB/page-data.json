{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/WEB",
    "result": {"pageContext":{"currentCategory":"WEB","categories":["All","AWS","Error","Spring","WEB","Java","디자인패턴","Git"],"edges":[{"node":{"id":"2bd91624-2e16-57df-8644-52512602846c","excerpt":"OAuth는 어떤 시스템에서 그 시스템의 사용자들이 Google, Facebook, KaKao talk과 같은 서비스에 직접 연결하지 않고도 시스템을 통해 각 서비스(Google,Facebook등) 의 기능을 이용하고 싶은 욕구로 인해 등장한 개념이다.\n 이 때 시스템이 사용자들의 서비스 계정정보를 모두 가지고 있다면 해당 문제가 쉽게 해결 되겠지만, 그것은 보안 상 매우 취약한 방법이다. 왜냐하면, 사용자 입장에서는 처음 보는 시스템에 자신의 카카오 계정정보를 맡겨야 되는 것이고, 시스템 입장에서도 사용자들의 카카오 계정정보를 가지고 있는 것 자체가 부담이다. 서비스 입장에서도 자신들의 사용자 정보를 신뢰할 수 없는 ‘시스템’에게 맡기는 것은 말도 안된다. 그래서 우리에겐 OAuth가 필요하다.​ OAuth에는 앞서 말한 것처럼 사용자, 시스템, 서비스 3가지의 주체가 있고, OAuth에서는 이를 각각 Resource owner(사용자), Client(시스템), Resource …","fields":{"slug":"/oauth/"},"frontmatter":{"categories":"WEB","title":"OAuth 란? OAuth 개념 및 동작원리(feat. 생활코딩)","date":"February 23, 2022"}},"next":{"fields":{"slug":"/spring-swagger/"}},"previous":{"fields":{"slug":"/jpa1/"}}},{"node":{"id":"385f5e04-75dc-546b-bf37-19032cb99613","excerpt":"AEM 을 소개함에 있어 해당 과정은 Udemy의 https://www.udemy.com/course/adobe-experience-manager-63 과정을\n영어가 어려운 사람들을 위해 한국어로 정리하는 데 목적이 있음을 밝힌다. AEM 관련해서 체계적으로 정리해둔 블로그를 찾지 못했기 때문이기도 하다. AEM 소개 AEM은 ‘Adobe Experience Manager’ 의 약어이며, 어도비 사에서 만든 Java 기반의 CMS 솔루션이다.\nAEM은 상용 웹 사이트를 만드는 데 많이 사용되며 웹 사이트의 콘텐츠와 asset 들을 관리하기에 용이하며 배포까지 지원한다. 웹사이트와 CMS 웹 사이트에는 3가지 종류가 있다. Static 웹 사이트\n: 정적 리소스로만 이루어진 웹 사이트이다. Dynamic 웹 사이트\n: 클라이언트/서버의 스크립트를 통해 동적으로 웹 사이트의 콘텐츠를 관리하는 웹 사이트이다. CMS template을 생성할 수 있다 재사용 가능한 Component를 생…","fields":{"slug":"/aem1/"},"frontmatter":{"categories":"WEB","title":"[AEM] Adobe Experience Manager","date":"February 07, 2022"}},"next":{"fields":{"slug":"/spring-boot-aws-environment/"}},"previous":{"fields":{"slug":"/git-access/"}}},{"node":{"id":"a4372864-4ae0-5bc1-8534-1f5c8d770858","excerpt":"Http Status Code 제어 REST API를 통해 User를 생성하는 API를 만드는 상황을 가정해보자.\n좀 더 나은 API 설계를 고려한다면 단순히 User를 생성만 하는 것에서 그칠 것이 아니라 요청자에게 response로 결과 데이터를 반환해주어야 할 것이다.\n가령 사용자에게 요청 값을 반환해 주기 위해 ServletUriComponentsBuilder 라는 클래스를 사용할 수 있다. 이렇게 하면 클라이언트는 Header로부터 200을 받는 것이 아니라 201 created 값을 반환받을 수 있게 되며\nheader의 Key값 중 location값에서 POST의 URI value를 알 수 있다. 여기선 http://localhost:8080/users/10 이 될 것이다. 이렇듯 200 OK로만 보내는 것이 아니라 CRUD에 따라, 그리고 여러가지 상황에 따라 서로 다른 HTTP status code값으로 응답해주는 것이 좋고, location값을 반환 해 줌에 따라 …","fields":{"slug":"/rest-httpcode-exception/"},"frontmatter":{"categories":"WEB","title":"[REST API] HTTP Status Code 제어와 예외 해들링(Exception handling)","date":"February 04, 2022"}},"next":{"fields":{"slug":"/why-spring-boot/"}},"previous":{"fields":{"slug":"/spring-boot-aws-environment/"}}},{"node":{"id":"07ed92a9-c988-5589-818d-86ca46d64f9f","excerpt":"REST와 대비하여 자주 언급되는 SOAP이라는 개념이 있다. SOAP이란 무엇인가? Simple Object Access Protocol의 약자로서 http,https,smtp를 이용하여 XML메시지로 통신을 가능하게 해주는 프로토콜을 말한다. 아래 그림과 같이 XML로 request를 보내고 XML로 response를 받는다. \n\n그리고 그 XML 메시지의 구조는 아래와 같이 Envelope, Header, Body의 세 부분(+Fault 부분 option)으로 이루어져 있다.\n \n 실제 SOAP의 메시지 구조를 살펴보면 아래와 같다. 전달하고자 하는 내용에 비해 부가적인 태그나 설정 관련 텍스트가 많아서 통신 시 불필요한 오버헤드가 발생할 뿐만 아니라 개발 하기에 까다롭기도 하다. SOAP vs REST SOAP과 REST\b의 차이점을 아주 잘 보여주는 표가 있어서 가져와보았다. SOAP와 REST의 공통점이라고 한다면 HTTP,HTTPS를 통해 데이터를 통신한다는 점이지만 …","fields":{"slug":"/soap/"},"frontmatter":{"categories":"WEB","title":"SOAP에 대한 이해. SOAP이란 무엇인가? (feat. REST vs SOAP ) ","date":"January 31, 2022"}},"next":{"fields":{"slug":"/spring-dependency-injection/"}},"previous":{"fields":{"slug":"/error-h2/"}}},{"node":{"id":"79f31ae3-dbbe-5ef8-9900-dd9942dc8f04","excerpt":"REST에 대해서 웹 문서들을 살펴보면 여러가지 표현들로 설명하고 있는데, 그것을 조합해서 내가 이해하기 쉽게 정의하자면 아래와 같다. “REST API란 HTTP Method를 사용하여 HTTP URI 형태로 명시된 리소스를 처리(CRUD) 하도록 설계된 클라이언트와 서버 간의 통신 방식이다”  클라이언트가 GET, POST, PUT, DELETE 등의 HTTP 메소드를 통해 URI로 서버에 요청하게 되면 서버는 해당되는 리소스에 대한 CRUD를 처리하고 클라이언트에 JSON 데이터를 반환한다. REST API의 구성 요소 1. Resource : REST에서는 resource의 정보를 표현할 수 있어야 하며 이를 위해 URI를 사용한다. 2. Method : resource에 대한 행위를 표현하며, HTTP의 GET(조회), POST(추가), PUT(수정), DELETE(삭제) 메소드를 사용한다. 3. Representaion : REST에서 representation(표현)이…","fields":{"slug":"/rest-api/"},"frontmatter":{"categories":"WEB","title":"REST API란 무엇인가? REST API 제약조건, 실용적인 REST API 설계 방법 ( feat. RESTful하다는 것 )","date":"January 25, 2022"}},"next":null,"previous":{"fields":{"slug":"/error-jpa-keyword/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}