{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Spring",
    "result": {"pageContext":{"currentCategory":"Spring","categories":["All","Spring","AWS"],"edges":[{"node":{"id":"e06ddfc4-adba-56ce-9603-9882e0a9756b","excerpt":"Spring boot를 사용해서 사이드 프로젝트를 하던 중에 다른 개발자들과의 협업을 위해 API를 문서화시키는 것에 대한 필요성이 있었는데 Swagger를 사용하여 별도의 문서 작성없이 소스상의 간단한 설정을 통해 API 문서 자동화를 구현했다. API 문서 자동화 방법은 아주 간단한데, Gradle의 경우 아래를 \bbuild.gradle의 dependenceis에 추가해주면 된다. Maven의 경우 아래를 pom.xml에 dependency에 추가해주면 된다. 이렇게만 하면 되는데, Spring boot 2.6 버전을 쓰는경우에는 NPE가 발생할 수 있다. Spring에서 디폴트로 PathPattern-based matching을 사용하는데,\nSpringfox에서는 Ant-based path matcher가 사용되는 것으로 가정하고 있기 때문에 문제가 발생한다고 한다(https://stackoverflow.com/questions/70036953/springboot-2-6-0-…","fields":{"slug":"/spring-swagger/"},"frontmatter":{"categories":"Spring","title":"Spring Swagger 사용하여 API 문서 자동화하기","date":"February 19, 2022"}},"next":{"fields":{"slug":"/spring-boot-aws-environment/"}},"previous":null},{"node":{"id":"c2fcb249-3189-5828-b2e1-d04bc2273100","excerpt":"1. AWS에서 프리티어로 EC2와 RDS 발급하기 1) EC2 인스턴스 발급 AWS 에 들어가서 EC2 인스턴스 생성하기로 가서 생성하면 된다. 프리티어로 발급 가능한 인스턴스를 발급 받았다. 발급 시 신경 써 주어야 할 부분은 프리티어에서 사용 가능한 최대 스토리지 설정(30GB)과 보안그룹에서 규칙을 설정하는 것이다. 보안그룹을 설정하지 않으면 생성한 EC2 서버로 모든 통신이 불가능하기 때문에 필요한 port와 사용자에 대해 꼭 설정해주어야 함! 나는 Front/Back-end를 위해 각각 3000,8080포트를 모든 사용자에게 허용하고 http,https를 통한 접근 허용을 위해 80,443 포트도 열어두었다. 2) EC2 ssh 접속 테스트 Windows에선 putty 설치해서, Mac에선 ssh 커맨드라인 툴을 이용해서 ssh priavte key를 사용해서 접속하면 된다.\n계정명은 ubuntu로 초기 로그인이 되며 su 명령어를 통해 root로 유저를 변경하여 roo…","fields":{"slug":"/spring-boot-aws-environment/"},"frontmatter":{"categories":"Spring AWS","title":"Spring boot 개발환경 설정 (gradle,JPA,MySQL,EC2,RDS)","date":"February 04, 2022"}},"next":null,"previous":{"fields":{"slug":"/spring-swagger/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}