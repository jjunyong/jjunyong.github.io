{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/error-insert/",
    "result": {"data":{"cur":{"id":"9d8e16d7-8f70-50bd-95f5-e78ca41b648f","html":"<p>운영하는 사이트에서 메일엔진 솔루션을 사용 중인데 메일엔진이 mail_queue라는 테이블에서 데이터를 긁어가서\n메일을 일괄 발송하는 방식이다.</p>\n<p>그런데 갑자기 사이트에 장애가 발생해서 mail_queue 테이블에 데이터가 insert되지 않는 에러가 발생했다.\n에러의 내용은 아래와 같았다.\n<br></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">JDBC-5074: Given String does not represent a number in proper format. </code></pre></div>\n<br>\n<p>이 문제를 구글링 해보니 tibero에서 자동 형변환을 지원하지 않아서 NUMBER인 컬럼에 string을 insert 시도하는 것이 문제라고 하는데,\n뭔가 내 경우랑 맞지 않는 것 처럼 보였다.</p>\n<p>그리고 로컬에서, 개발서버에서도 해당 에러가 재현되지 않고 디버깅을 찍어보아도 insert되는 데이터는 정상이었다.</p>\n<p>문제는 바로 INSERT를 수행하기 전 key 값을 sql로 채번하는 것이었다.\nmail_queue 테이블의 PK인 메일 id( mail_id )값을 기존의 테이블의 mid값 중 max값을 불러와 여기에 1을 더한 뒤에 insert하는 데,\nDB의 mid값에 특수기호가 들어있던 것이 문제였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token operator\">&lt;</span>selectKey resultType<span class=\"token operator\">=</span><span class=\"token string\">\"String\"</span> keyProperty<span class=\"token operator\">=</span><span class=\"token string\">\"mail_id\"</span> <span class=\"token keyword\">order</span><span class=\"token operator\">=</span><span class=\"token string\">\"BEFORE\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>CDATA<span class=\"token punctuation\">[</span>\n<span class=\"token keyword\">SELECT</span> DECODE<span class=\"token punctuation\">(</span>\n<span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>mail_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\nTO_CHAR<span class=\"token punctuation\">(</span>SYSDATE<span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYYMMDD'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'00001'</span><span class=\"token punctuation\">,</span>\nTO_CHAR<span class=\"token punctuation\">(</span>TO_CHAR<span class=\"token punctuation\">(</span>SYSDATE<span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYYMMDD'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> LPAD<span class=\"token punctuation\">(</span>TO_NUMBER<span class=\"token punctuation\">(</span>SUBSTR<span class=\"token punctuation\">(</span><span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>mail_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span>  mail_id\n<span class=\"token keyword\">FROM</span> mail_queue\n<span class=\"token keyword\">WHERE</span> TO_CHAR<span class=\"token punctuation\">(</span>sdate<span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYYMMDD'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> TO_CHAR<span class=\"token punctuation\">(</span>SYSDATE<span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYYMMDD'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>selectKey<span class=\"token operator\">></span></code></pre></div>\n<p>수동으로 DB에 메일 데이터를 생성해 넣었던 것이 문제였던 것이다.</p>\n<p>단순한 에러이지만 로컬/개발서버에서 재현되지 않았던 것이 당황스러웠는데,,</p>\n<ul>\n<li>INSERT 하기 전에 채번을 수행할 수 있다는 점,</li>\n<li>로직이 아닌 data가 문제를 발생시킬 수 있다는 점</li>\n</ul>\n<p>을 기억해야 겠다. 끝.</p>","excerpt":"운영하는 사이트에서 메일엔진 솔루션을 사용 중인데 메일엔진이 mail_queue라는 테이블에서 데이터를 긁어가서\n메일을 일괄 발송하는 방식이다. 그런데 갑자기 사이트에 장애가 발생해서 mail_queue 테이블에 데이터가 insert되지 않는 에러가 발생했다.\n에러의 내용은 아래와 같았다.\n 이 문제를 구글링 해보니 tibero에서 자동 형변환을 지원하지 않아서 NUMBER인 컬럼에 string을 insert 시도하는 것이 문제라고 하는데,\n뭔가 내 경우랑 맞지 않는 것 처럼 보였다. 그리고 로컬에서, 개발서버에서도 해당 에러가 재현되지 않고 디버깅을 찍어보아도 insert되는 데이터는 정상이었다. 문제는 바로 INSERT를 수행하기 전 key 값을 sql로 채번하는 것이었다.\nmail_queue 테이블의 PK인 메일 id( mail_id )값을 기존의 테이블의 mid값 중 max값을 불러와 여기에 1을 더한 뒤에 insert하는 데,\nDB의 mid값에 특수기호가 들어있던 것이 문…","frontmatter":{"date":"March 28, 2022","title":"[Error] insert시 select key 후 inesrt로 인한 에러 발생 조치 (JDBC-5074: Given String does not represent a number in proper format)","categories":"Error","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/error-insert/"}},"next":{"id":"cbd47f43-f6c1-584b-ba41-4fd008565526","html":"<p>Type definition error: [simple type, class stg.onyou.service.CursorResult]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class stg.onyou.service.CursorResult and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: stg.onyou.model.network.Header[“data”])“,</p>\n<p>RestController에서 return 시 객체를 json으로 serialize하는데, 이 때 객체의 멤버 중에 Getter가 없는 멤버 변수가 있어서 발생한 에러이다.</p>\n<p>간단하게 Getter를 직접 설정해주거나,</p>\n<p>아니면 @Getter 어노테이션만 추가해주면 해결된다.</p>","frontmatter":{"date":"March 27, 2022","title":"[Error] Getter가 없어서 발생하는 JSON Serialize 에러","categories":"Error","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/error-json-serialize/"}},"prev":{"id":"9bf85671-8a17-5a6e-8503-65385d57a3c1","html":"<p>Spring boot 환경에서 AWS S3를 연동해서 사용하려고 하면, application.yml 또는 application.properties에 아\n래와 같이 accessKey, secretKey값을 설정해줄 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">cloud<span class=\"token punctuation\">.</span>aws<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>accessKey<span class=\"token operator\">=</span>accessKey값\ncloud<span class=\"token punctuation\">.</span>aws<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>secretKey<span class=\"token operator\">=</span>secretKey값</code></pre></div>\n<br>\n<p>그런데 이렇게 설정을 하게 되면 AWS의 accessKey, secretKey값이 깃헙에 노출되는 문제가 발생한다.</p>\n<p>이미 나는 그걸 모르고 별일 없겠지라는 안일한 생각으로 깃헙에 코드를 푸시했다가 <strong>이틀 만에 해킹(ㅠㅠ)</strong> 당하는 일을 겪어야 했다.</p>\n<p><del>이틀 만에 80 달러 치를 썼더라 해커놈 ㅡㅡ</del></p>\n<p>그러니 반드시 Jasypt를 활용해서 AWS key값을 암호화해서 올리시길 바란다.</p>\n<h2 id=\"jasypt\" style=\"position:relative;\"><a href=\"#jasypt\" aria-label=\"jasypt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jasypt</h2>\n<p>: Java Simplified Encryption으로 암호화를 위한 Library이다. 보통 프로퍼티에 노출되는 중요 정보들을 암호화 해주는 용도로 사용한다.</p>\n<h3 id=\"1-의존성-설정--buildgradle-\" style=\"position:relative;\"><a href=\"#1-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%84%A4%EC%A0%95--buildgradle-\" aria-label=\"1 의존성 설정  buildgradle  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 의존성 설정 ( build.gradle )</h3>\n<p>나는 gradle을 사용하기 때문에 아래와 같이 간단한게 jasypt를 사용하기 위한 의존성을 설정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dependencies {\n\timplementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'\n}</code></pre></div>\n<h3 id=\"2-custom-vm-option에-password-설정\" style=\"position:relative;\"><a href=\"#2-custom-vm-option%EC%97%90-password-%EC%84%A4%EC%A0%95\" aria-label=\"2 custom vm option에 password 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Custom vm Option에 password 설정</h3>\n<p>jasypt를 이용해서 encrypt, decrypt를 실행 시 반드시 password를 설정해야 되는데, 이 password는 다른 사람이 알게되면\n결국 jasypt를 이용해서 복호화가 가능하므로 절대 외부로 노출되서는 안된다.</p>\n<p><strong>따라서 jvm option에 추가 해준다.</strong> Intellij에서는 [Help]-[Edit custom VM Options] 에 아래행을 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span><span class=\"token class-name\">Djasypt_password</span><span class=\"token operator\">=</span>password값</code></pre></div>\n<br>\n<h3 id=\"3-config-클래스-설정\" style=\"position:relative;\"><a href=\"#3-config-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A4%EC%A0%95\" aria-label=\"3 config 클래스 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Config 클래스 설정</h3>\n<p>의존성과 vm option 설정이 끝났다면 이제 코드를 작성해보자.</p>\n<ul>\n<li>\n<p>JasyptConfig 클래스를 @Configuration 로 만들어주고, Bean을 등록해준다.</p>\n</li>\n<li>\n<p>bean name을 설정해서 jasypt가 application.properties 파일에서 bean을 참조할 수 있도록  설정한다.</p>\n</li>\n<li>\n<p>jvm option에서 설정한 jasypt_password값을 System.getProperty(“jasypt_password”) 명령을 통해 가져와서 password로 설정한다.</p>\n</li>\n</ul>\n<br>\n<p>JasyptConfig.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JasyptConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> encryptKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"stgOnyouEncryptor\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//원하는 이름 아무거나</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StringEncryptor</span> <span class=\"token function\">stringEncryptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">PooledPBEStringEncryptor</span> encryptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PooledPBEStringEncryptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SimpleStringPBEConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringPBEConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> jasyptPassword <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jasypt_password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>jasyptPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PBEWithMD5AndDES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolSize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setSaltGeneratorClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.jasypt.salt.RandomSaltGenerator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setStringOutputType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        encryptor<span class=\"token punctuation\">.</span><span class=\"token function\">setConfig</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> encryptor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>application.properties</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">jasypt<span class=\"token punctuation\">.</span>encryptor<span class=\"token punctuation\">.</span>bean <span class=\"token operator\">=</span> stgOnyouEncryptor <span class=\"token comment\">// JasyptConfig의 bean name과 일치해야함</span></code></pre></div>\n<p>이렇게 하면 jasypt를 위한 암호화 설정은 끝났다.</p>\n<h3 id=\"4-테스트-코드를-통해-암호화된-key값-얻기\" style=\"position:relative;\"><a href=\"#4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%94%ED%98%B8%ED%99%94%EB%90%9C-key%EA%B0%92-%EC%96%BB%EA%B8%B0\" aria-label=\"4 테스트 코드를 통해 암호화된 key값 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 테스트 코드를 통해 암호화된 key값 얻기</h3>\n<p>아래와 같이 테스트 코드를 작성 후 실행하면 accessKey, secretKey에 대해서 ‘jasypt_password’ 값으로 암호화 한 key값을 각각 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JasyptConfigTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">jasyptTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//given</span>\n        <span class=\"token class-name\">String</span> accessKey <span class=\"token operator\">=</span> <span class=\"token string\">\"accessKey값\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> secretKey <span class=\"token operator\">=</span> <span class=\"token string\">\"secretKey값\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">StandardPBEStringEncryptor</span> jasypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardPBEStringEncryptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> jasyptPassword <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jasypt_password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>jasyptPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PBEWithMD5AndDES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> encryptedAccessKey <span class=\"token operator\">=</span> jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey 암호화 내용: \"</span> <span class=\"token operator\">+</span> encryptedAccessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> decryptedAccessKey <span class=\"token operator\">=</span>  jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>encryptedAccessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey 복호화 내용: \"</span> <span class=\"token operator\">+</span> decryptedAccessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> encryptedSecretKey <span class=\"token operator\">=</span> jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secretKey 암호화 내용: \"</span> <span class=\"token operator\">+</span> encryptedSecretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> decryptSecretKey <span class=\"token operator\">=</span>  jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>encryptedSecretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accessKey 복호화 내용: \"</span> <span class=\"token operator\">+</span> decryptSecretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span>decryptedAccessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span>decryptSecretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>System.out.println 해서 암호화된 key값을 얻은 뒤에 application.properties에 암호화된 값으로 설정하면 된다.\n이 값을 ENC로 감싸주면 알아서 jasypt가 알아서 복호화를 시켜준다고 하는데,(예를 들어 ENC(암호화값) 이런식으로..)\n나는 그게 잘 안되서 그냥 암호화된 값을 application.properties에 입력하고, awsConfig 클래스에서 직접 복호화했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">cloud<span class=\"token punctuation\">.</span>aws<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>accessKey<span class=\"token operator\">=</span>암호화된accessKey값\ncloud<span class=\"token punctuation\">.</span>aws<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span>secretKey<span class=\"token operator\">=</span>암호화된secretKey값</code></pre></div>\n<br>\n<h3 id=\"5-aws-config-클래스에서-적용\" style=\"position:relative;\"><a href=\"#5-aws-config-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A0%81%EC%9A%A9\" aria-label=\"5 aws config 클래스에서 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. AWS config 클래스에서 적용</h3>\n<p>나는 아래와 같이 AWS access, secret Key를 사용하는 쪽 코드에서 직접 복호화 해주었다.\n만약에 ENC()로 감싸는 방법이 잘 적용된다면 ‘여기서부터’ ~ ‘여기까지’ 코드는 필요없이 jasypt에서\naccessKey, secretKey 값을 불러올 때 알아서 복호화된 값으로 불러와서 변수에 저장해줄 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AwsS3Config</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.credentials.accesskey}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.credentials.secretkey}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${cloud.aws.region.static}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AmazonS3Client</span> <span class=\"token function\">amazonS3Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">//여기서부터 </span>\n        <span class=\"token class-name\">StandardPBEStringEncryptor</span> jasypt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardPBEStringEncryptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> jasyptPassword <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jasypt_password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>jasyptPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">setAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PBEWithMD5AndDES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> decryptAccessKey <span class=\"token operator\">=</span> jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> decryptSecretKey <span class=\"token operator\">=</span> jasypt<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//여기까지 </span>\n        <span class=\"token class-name\">BasicAWSCredentials</span> awsCreds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicAWSCredentials</span><span class=\"token punctuation\">(</span>decryptAccessKey<span class=\"token punctuation\">,</span> decryptSecretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AmazonS3Client</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AmazonS3ClientBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">standard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withRegion</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AWSStaticCredentialsProvider</span><span class=\"token punctuation\">(</span>awsCreds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br>\n<h3 id=\"6-빌드-시-옵션-추가\" style=\"position:relative;\"><a href=\"#6-%EB%B9%8C%EB%93%9C-%EC%8B%9C-%EC%98%B5%EC%85%98-%EC%B6%94%EA%B0%80\" aria-label=\"6 빌드 시 옵션 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 빌드 시 옵션 추가</h3>\n<p>5번까지 진행하면 로컬에서 jasypt를 사용하기 위한 환경설정은 끝난다.\n그러나 빌드 하여 배포를 하려면 Intellij run시 jvm option 추가 해줬던 것처럼 jasypt_password 환경변수를 추가해주어야 한다.</p>\n<p>나는 github에 푸시하면 Github action이 Dockerfile 읽어서 자동으로 빌드하게 설정해두었기 때문에 아래와 같이 dockerfile에 추가해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">FROM openjdk:11-jdk\nARG <span class=\"token assign-left variable\">JAR_FILE</span><span class=\"token operator\">=</span>build/libs/onyou-0.0.1-SNAPSHOT.jar\nCOPY <span class=\"token variable\">${JAR_FILE}</span> app.jar\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"sh\"</span>, <span class=\"token string\">\"-c\"</span>, <span class=\"token string\">\"java <span class=\"token variable\">${JAVA_OPTS}</span> -jar /app.jar\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>그리고 docker 이미지 실행 시에 아래와 같이 입력해주면 환경변수로 jasypt password를 설정해 줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -d -p 8080:8080 -e JAVA_OPTS=-Djasypt_password={패스워드} {도커이미지}:{태그}</code></pre></div>\n<hr>\n<p>지금까지 jasypt를 이용해서 소중한 aws key값을 보호하는 방법을 알아보았다.\n비단 aws key값 뿐만 아니라 DB 정보를 암호화하는데도 사용할 수 있을 것이다.</p>\n<hr>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<ul>\n<li><a href=\"https://velog.io/@znftm97/Jasypt-%EC%82%AC%EC%9A%A9%EB%B2%95-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%8C%8C%EC%9D%BC-%EC%95%94%ED%98%B8%ED%99%94\">https://velog.io/@znftm97/Jasypt-%EC%82%AC%EC%9A%A9%EB%B2%95-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%ED%8C%8C%EC%9D%BC-%EC%95%94%ED%98%B8%ED%99%94</a></li>\n<li><a href=\"https://junyharang.tistory.com/m/191\">https://junyharang.tistory.com/m/191</a></li>\n<li><a href=\"https://blusky10.tistory.com/404\">https://blusky10.tistory.com/404</a></li>\n<li><a href=\"https://kim-jong-hyun.tistory.com/50\">https://kim-jong-hyun.tistory.com/50</a></li>\n</ul>","frontmatter":{"date":"April 15, 2022","title":"[AWS] AWS key값을 Jasypt를 이용해서 보호하자","categories":"AWS","author":"jjunyong","emoji":"🧢"},"fields":{"slug":"/aws-jasypt/"}},"site":{"siteMetadata":{"siteUrl":"https://jjunyong.github.io","comments":{"utterances":{"repo":"jjunyong/jjunyong.github.io"}}}}},"pageContext":{"slug":"/error-insert/","nextSlug":"/error-json-serialize/","prevSlug":"/aws-jasypt/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}