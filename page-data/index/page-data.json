{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"faccf86d-8f5a-5a94-871c-d5b61f4ee82d","excerpt":"호스트 서버에서 평소에는 늘 VM에 SuperPutty로 접속하면 접속이 잘 됐었는데, 어느 날 갑자기 로그인 창에서 패스워드 입력하라고 나오지 않기 시작했다.\n아주 오래 기다려 나오더라도 패스워드 입력도 제대로 안 먹혔다.\n 해결 방법 1 /etc/ssh/sshd_config 파일의 UseDNS 설정을 변경한다.\nUseDNS yes로 디퐅르 설정이 되어 있어 Reverse DNS를 하기 때문에\nUseDNS no 로 변경해 한다. 변경 후 sshd 데몬 reload 해결 방법 2 해결 방법 1을 해도 안될 경우!\n호스트 서버에서 자동으로 ip를 할당 받도록 하지 않고, 8.8.8.8, 8.8.4.4 를 DNS서버로 지정해준다.\n그리고 VM에서도 /etc/sysconfig/network-scripts/ifcfg-eth0 파일의 설정에서도 아래와 같이 DNS 서버 정보가 호스트와 일치하도록 해주면 된다.","frontmatter":{"categories":"Error","title":"[Error] 호스트(host) 서버에서 VM의 SSH 접속이 매우 느린 현상","date":"July 13, 2023"},"fields":{"slug":"/error-vm-dns/"}}},{"node":{"id":"736bc490-9cd9-50a4-a15c-84091cdba91e","excerpt":"‘Communications link failure’ spring boot pod 로그 살펴보면 계속 이와 같은 에러가 났는데, 구글링 했을 때 여러가지 해결방안은 있었지만 결국 나에게는 pod가 DB와 3-handshake자체가 안됐었던 것이 문제였다.\nhost서버에서 wireshark로 분석해보니 mysql로 SYN으로 보내는 패킷만 있고 ACK를 받지 못하고 있었다.\n\n그런데 막상 호스트 서버에서 직접 mysql로 dbeaver통해 붙을 땐 잘 붙었다는 것.\n호스트 서버로 잘 들어오는데 Vm으로 포워딩은 못해주고 있는 게 문제니깐 포트 포워딩이 결국 문제였던 것이다.\n포트 포워딩을 수정해주고 나서 해결되었음. ‘Public Key retrieval is not allowed’ 아래와 같이 datasource url에 ‘allowPublicKeyRetrieval=true’로 변경해주면 됨 MySQL에서 좀 더 자세한 로그 보는 방법 /etc/my.cnf에서 아래 내용 추가 후 …","frontmatter":{"categories":"Error","title":"[Error] K8S : Spring boot pod - MySQL 연결기","date":"July 13, 2023"},"fields":{"slug":"/error-spring-mysql/"}}},{"node":{"id":"840bfffc-342f-5f6a-8093-3eca088a6c11","excerpt":"컴퓨터 구조 storage로부터 프로그램을 읽어서 프로세스로서 메모리에 적재시키며 이를 processor인 CPU가 실행시킨다.\n 프로세스 모니터링 ps 사용법 htop 사용법 Load average 프로세스의 실행 백그라운드 Ctrl+Z : 프로세스를 백그라운드로 전환 jobs : 백그라운드에서 실행 중인 프로셋 확인 가능 fg : 백그라운드에서 실행 중인 프로세스를 포그라운드로 전환  : 4번 job을 전환 그냥 만 하게 되면 + 표시 되어있는 프로세스가 전환됨 & : 백그라운드로 프로세스 실행 bg : Stopped 된 백그라운드 프로세스를 다시 실행 시킴 항상 실행 (데몬) systemctl을 이용한 서비스 제어 : CentOS7부터는 ‘service’가 아닌 ‘systemctl’ 사용 /etc/init.d 디렉토리에는 데몬 실행 스크립트들이 모여있다. /etc/rc3.d 디렉토리에는 데몬 실행 스크립트에 대한 심볼링 링크가 모여있다. shell로 부팅되면 rc3. GUI로…","frontmatter":{"categories":"Linux","title":"[리눅스 스터디] 3. 프로세스","date":"July 12, 2023"},"fields":{"slug":"/linux-w3/"}}},{"node":{"id":"126123b5-2406-51f1-a2ed-b243f2987459","excerpt":"Redis 설치 remmi repo를 사용하지 않고 그냥 yum install하게 되면 redis3버전이 latest이므로 반드시 remi repo를 사용해야 한다. Redis 실행 Redis 구축 개발계 Redis 설정 redis를 설치한 현 상태에서는 systemctl 명령어로 단일 ‘redis’ 서비스만 관리할 수 있다. 나는 개발계용 redisdev service부터 운영용 redis1, redis2, redis3 service를 관리하고 싶은 상황이다.\n따라서 최초에 실행 한 redis를 redisdev라는 서비스로 띄우고, 관련된 설정도 수정하고자 한다. 기존에 실행되고 있는 redis service를 내린다.  /usr/lib/systemd/system/redis.service -> redisdev.service로 명칭 변경 /etc/redis.conf의 이름을 redisdev.conf로 변경하고, 해당 파일 내에 redis 관련된 path를 변경한다. 변경 한 경로의…","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 7. Redis 구축하기","date":"July 11, 2023"},"fields":{"slug":"/on-premise7/"}}},{"node":{"id":"bc4fa07b-cdf1-5248-be3c-52af000a21a4","excerpt":"MySQL 8.0 설치 1. 설치가능한 MySQL repository 확인 www.mysql.com/products/community/ 2. MySQL Repository 설치 1에서 확인한 yum, CentOS 7버전에 해당하는 repository를 찾아서 설치한다. 직접 찾아서 설치하지 않으면 outdate 될 수 있기 때문에 반드시 mysql홈페이지에서 직접 repostiory찾아야 한다. 3. MySQL 설치 4. MySQL 서버 시작 및 셋팅 아래 명령을 통해 설치된 mysql서버의 root 계정 비밀번호를 알아 낼 수 있음  MySQL Secure installation : MySQL 보안 강화하기  명령을 통해 mysql이 권장하는 보안 관련된 기본 설정을 셋팅한다.\n이 과정에서 mysql에서는 root비밀번호 변경을 요청하니까 위에서 알아낸 password를 입력하고 변경하면 된다. 나중에 직접 root계정 비번만 변경하려면 아래와 같이 하면 됨 root계정 비밀번호…","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 6. DB 서버 구축하기","date":"July 10, 2023"},"fields":{"slug":"/on-premise6/"}}},{"node":{"id":"8e5edec6-07e9-579e-8b39-0199b2bd0d34","excerpt":"1. 쉘(Shell) Shell vs Kernel\n쉘은 무엇이고 커널은 무엇인가? Kernel은 H/W를 제어하는 OS에서 가장 중요한 코어와 같은 역할이다.  Shell은 유저가 직접 커널을 조작하는 것은 매우 어렵기 때문에 유저가 실행한 application을 kernel이 이해할 수 있는 형태로 변환시켜준다.\nshell도 프로그램이기 때문에 종류가 한 개만 있는 것이 아니라 bash, zsh등 여려가지가 존재하며  명령을 통해 현재 사용되고 있는 shell이 무엇인지 확인할 수 있다. 2. 쉘 스크립트(Shell script) shell script의 맨 처음에는 를 적어줌으로써 bash 쉘을 사용하는 스크립트임을 명시한다. 예시\n: 간단한 log파일 백업 스크립트 3. 디렉토리 구조 리눅스 OS의 디렉토리는 기본적으로 아래와 같은 구조를 가진다.  https://www.thegeekstuff.com/2010/09/linux-file-system-structure/ /sbin…","frontmatter":{"categories":"Linux","title":"[리눅스 스터디] 2. Shell Script, 디렉토리 구조 및 파일","date":"July 04, 2023"},"fields":{"slug":"/linux-w2/"}}},{"node":{"id":"ca567892-1197-5142-89b7-611bdfc77df1","excerpt":"Istio 환경구성 Istio 설치 생각보다 istio 설치하는 것 자체는 간단하다. 아래와 같은 과정을 따라 하면 끝이다. Istioctl 다운로드 : controlplane에서 다운로드 한다.  istioctl 명령어 사용하기 위한 PATH 등록   istio 설치 ( https://istio.io/latest/docs/setup/install/istioctl/ ) istioctl로 바로 설치하기  default Profile으로 설치됨 설치 후 deployment에 istiod, istio-ingressgateway설치되었음을 확인 가능 istio-operator로 설치하기  : 이렇게 하면 istio-operator namespace와 함께 istio-operator pod가 생성된다. 그런 후 k apply -f 를 해서 아래 istio-operator 파일을 apply 해주면 istiod, istio-ingressgateway, egressgateway 등 istio가 …","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 4. Istio 환경 구축하기","date":"July 02, 2023"},"fields":{"slug":"/on-premise4/"}}},{"node":{"id":"5ddab0e0-9d57-5cdc-bf2f-23512b7453bb","excerpt":"","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 5. 네트워크 설정","date":"July 02, 2023"},"fields":{"slug":"/on-premise5/"}}},{"node":{"id":"0c2b0a8f-e1ce-5168-9bb0-52991a15f6a9","excerpt":"무작위 접속 시도 차단을 위한 ipban 적용 github에서 https://github.com/DigitalRuby/IPBan/releases url로 ipban을 다운로드 한다. 로그인/로그오프 기록을 로깅하여 ‘이벤트뷰어’-’보안’ 에서 확인하도록 하기  서비스등록     ipban.config 수정 후 서비스 재기동하기 로그인 5회 실패시 등록 이벤트 뷰어 보는 법 [실행창] - “eventvwr” 입력하면 된다.\n생각보다 호스트 서버에 무작위로 접속 시도하는 경우가 많아서 윈도우 서버의 경우 이벤트 뷰어에 들어가서 누가 언제 호스트 서버에 접속했는지 확인할 수 있다.\n접속 시도와 관련된 이벤트 id 및 로그온 유형은 다음과 같다. Event ID 4624 성공적인 로그인을 뜻한다. 따라서 관리자가 접속한 시간이 아닌 경우에 4624가 발생했다면 외부 공격을 의심해야 한다. 4625 계정 로그온 실패로 분류되며, 나의 경우에는 이벤트 뷰어에서 4624 이벤트가 초 단위로 쌓…","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 3. 호스트 서버 보안","date":"July 02, 2023"},"fields":{"slug":"/on-premise3/"}}},{"node":{"id":"83fbc418-ebe7-5158-a8e0-5f8d2d000eb0","excerpt":"1. 사전 설정 : 사전 설정은 모든 노드에서 실행해주어야 한다. cri-docker Install cri-docker Version Check cri-docker Active Check Docker cgroup Change Require to Systemd 2.  패키지 설치 : kubeadm, kubectl, kubelet 패키지 설치도 모든 노드에서 실행 해준다. Swap disable 처리  iptable이 bridged traffic 을 바라볼 수 있도록 설정.   컨테이너는 가상화된 네트워크 인터페이스를 사용하므로, 컨테이너 간의 통신 및 네트워크 기능을 지원하기 위해 호스트 단에서 커널 parameter를 위와 같이 변경하는 것이다. net.bridge.bridge-nf-call-ip6tables = 1: 이 설정은 IPv6 네트워크 트래픽이 브리지로 전달되어 IP 테이블에서 필터링될 수 있도록 한다. net.bridge.bridge-nf-call-iptables = …","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 2. K8S 클러스터 설치","date":"July 01, 2023"},"fields":{"slug":"/on-premise2/"}}},{"node":{"id":"db355e4e-68b0-52ba-bab3-1048577684ab","excerpt":"1. 서버/VM 구축 1. 서버 셋팅 1) 공유기 설정 공유기 어드민 콘솔에 접근하여 DDNS 설정, 포트포워딩, 고정IP 할당을 해준다. 공유기 콘솔에 접근 하는 방법은 공유기 제조사 마다 다른데, 나의 경우는 tplink라서 192.168.0.1로 접근 가능 고정 IP 설정 공유기 콘솔에 들어가면 연결된 서버에 고정 ip를 할당 포트포워딩 설정 할당된 고정 ip에 포트포워딩을 설정한다. 예를 들어 공유기로 8080 포트로 들어왔을 때 서버의 9090포트로 포워딩 되도록 설정하는 것이다. 동적 DNS 설정 ( DDNS ) 실제 공유기의 공인 ip는 변동되기 때문에 동적 DNS 설정을 통해 ‘aaa.tplinkdns.com’ 이런 도메인으로 외부에서 서버로 접속 할 수 있도록 해주어야 한다. 여기까지 하면 aaa.tplinikdns.com:8080으로 접속했을 때, 내 서버가 설치된 공유기의 8080포트로 접속이 되게 되고, 고정ip와 포트포워딩 설정을 통해 LAN내에 존재하는 내…","frontmatter":{"categories":"DevOps","title":"On-premise 서버 구축하기 1. 공유기, 서버, 네트웍 설정","date":"July 01, 2023"},"fields":{"slug":"/on-premise1/"}}},{"node":{"id":"12da607d-f519-5b82-bb76-4a94eca42bb2","excerpt":"1. 리눅스 기초 디렉토리와 파일 기본 명령어 ls, pwd, mkdir, touch, cd, rm 등 명령어에 옵션을 붙일 수 있음 ls -al, rm -r, mkdir -p, ls -S( file size sort desc ) . , .., ~ 의 의미 —help와 man man 명령어는 전용 페이지로 넘어가서 보다 상세한 설명을 알려줌. sudo 관리자의 권한으로 명령을 실행 시 필요함. 패키지 매니저 다양한 소프트웨어들을 패키지라고 한다. 가령 ls, mkdir, man등도 모두 패키지이다.\n하지만 기본적으로 제공하는 프로그램이 아닌 다른 것들은 패키지 매니저를 통해 설치해야 한다.\n일종의 앱스토어라고 생각하면 된다. 우분투 계열의 패키지 매니저인 apt-get 사용법을 알아보자. ( redhat 계열 : yum ) htop 을 활용하면 CLI기반에서도 꽤나 GUI와 같은 형태로 리소스의 상태를 확인할 수 있다. 패키지 설치 sudo apt-get install htop 패…","frontmatter":{"categories":"Linux","title":"[리눅스 스터디] 1. 리눅스 기초 & IO redirecdtion","date":"June 28, 2023"},"fields":{"slug":"/linux-w1/"}}},{"node":{"id":"852eb83f-f0c1-5cc0-a18a-f10e121e398f","excerpt":"개요 재해 발생 시 인프라를 보호하는데 사용할 수 있는 전략은 무엇인가 백 가동 중단 시간을 최소화하면서도 비용 효율적인 방안은 무엇인가 가용성 고가용성 내결함성 백업 재해 복구 RPO, RTO RPO : 데이터 백업해야 하는 빈도 RTO : 복구하는데 걸리는 시간 스토리지 복제 Amazon S3 : cross-region replica Amazon EBS : 스냅샷을 떠서 S3에 저장할 수 있다. 복구용 AMI 구성 데이터베이스 백업 및 복제 RDS DynamoDB AWS backup 지속적인 학습 실습 링크 : https://us-east-1.student.classrooms.aws.training/class/5Hg5hDtgWR8wnGDGevtJcR 실습 참고 영상 : https://us-east-1.student.classrooms.aws.training/class/5Hg5hDtgWR8wnGDGevtJcR AWS architecture 그리기 https://aws.amazon…","frontmatter":{"categories":"AWS","title":"[AWS architect] 13. 백업 및 복구, 재해대책","date":"July 08, 2022"},"fields":{"slug":"/aws-architect13/"}}},{"node":{"id":"252d2495-5f47-5fb9-b442-ada536036868","excerpt":"개요 Serverless란 프로비저닝, 관리할 인프라 없음 소비 단위에 따라 자동으로 scaling 내장된 보안/고가용성 컴퓨팅 [AWS 서버리스 서비스 목록 이미지] 서버리스 아키텍처 예시 Amazon API Gateway cognito, lambda 등을 통해 인증 붙일 수 있음 샘플 아키텍처 Amazon SQS 완전관리형 메시지 대기열 서비스 표준 대기열은 순서가 완전히 보장되지는 않는다. FIFO는 보장 Amazon SNS Amazon Kinesis AWS Step Functions 시각적 워크플로우를 사용한 마이크로서비스 조정 각 단계를 자동으로 시작하고 추적할 수 있다. 로그 및 시각화 제공 [이미지] Amazon State Language 실습 : 서버리스 아키텍처 구축","frontmatter":{"categories":"AWS","title":"[AWS architect] 11. Serverless","date":"July 08, 2022"},"fields":{"slug":"/aws-architect11/"}}},{"node":{"id":"15afade6-25f2-5999-bd8e-2b839d484543","excerpt":"개요 Route 53 CloudFront 정적 콘텐츠 캐싱 뿐만 아니라 동적 콘텐츠 가속화 ( AWS 고속 네트웍 망 활용) 하는 데에도 사용된다. 성능 개선 DDoS 보호 정상 패킷으로 공격 OSI 계층 공격 AWS Shield AWS WAF 6,7 계층 공격 방어 DDoS 복원력 참조 아키텍처 AWS outposts AWS 장비를 on-premise로 가져와서 private하게 사용하되, AWS의 코어 서비스를 활용할 수 있다. 실습","frontmatter":{"categories":"AWS","title":"[AWS architect] 12. Edge service","date":"July 08, 2022"},"fields":{"slug":"/aws-architect12/"}}},{"node":{"id":"140fa5b0-4c7a-5df7-8612-b728f0c99b35","excerpt":"개요 AWS 서비스에 대한 연결을 프라이빗 상태로 유지할 수 있는가 VPC 간에 private 방식으로 트래픽을 라우팅하려면? 온프레이미스 <-> AWS 를 연결하려면 VPC Endpoint internet gateway 타지 않고 privateg하게 private subnet내에 있는 EC2 instance와 AWS 완전 관리형 서비스인 DynamoDB를 통신하게 할 수 있다.\nVPC Endpoint가 없다면 NAT를 타고 IGW를 타고 통신해야 한다.\nVPC 만들 때 Gateway endpoint와 Interface endpoint 하나 씩만 최초에 만들어주면 된다. Gateway endpoint 라우팅 테이블에 지정된 대상 S3, Dynamo DB 서비스 지원 추가 비용 없음 Interface endpoint private IP의 ENI를 통해 서비스와 통신한다고 이해하면 됨 추가 비용 존재 VPC endpoint도 리소스이므로 리소스 기반 정책을 적용할 수 있다.\n[심층 방…","frontmatter":{"categories":"AWS","title":"[AWS architect] 10. Networking2","date":"July 08, 2022"},"fields":{"slug":"/aws-architect10/"}}},{"node":{"id":"35dc9692-9cca-5dc0-ba68-e35686c73fe2","excerpt":"AWS애서의 컨테이너 실행 컨테이너 오케스트레이션 EKS : AWS에서 지원하는 k8s 사용 툴 ECS : AWS에서 개발한 오케스트레이션 툴 ECR : AWS에서 개발한 고가용성 Container registry Fargate, EC2 : 컨테이너 호스팅 EC2의 유휴 리소스를 컨테이너가 다 활용하지 못하면 리소스 낭비이기 때문에 Fargate가 등장하게 되어 컨테이너를 서비리스하게 사용하게 되었음. K8S 아키텍처 [이미지] Amazon EKS controlplane은 AWS가 관리해준다. 워크로드는 Fargate를 활용하거나 EC2를 활용하여 워커노드를 구성한다. EKS workshop을 통해서 EKS 실습해볼 수 있다.","frontmatter":{"categories":"AWS","title":"[AWS architect] 9. 컨테이너","date":"July 07, 2022"},"fields":{"slug":"/aws-architect9/"}}},{"node":{"id":"37e29bbf-540b-5f6f-b57b-e28b7164de8e","excerpt":"IaC IaC의 장점 : 재사용성과 업데이트 AWS CloudFormation CloudFormation > Stack > create Stack에서 IaC yaml파일을 등록하여 한 꺼번에 프로비저닝 할 수 있다. AWS 대부분의 리소스를 CloudFormation 템플릿으로 제어할 수 있다. AWS Elastic Beanstalk 웹 콘솔에서 클릭으로 할 수 있기 때문에 편의성 면에서 프로비저닝하기 더 좋다. AWS CDK(Cloud Development Kit) python, typescript 등의 언어로 컴파일하여 CloudFormation template을 만들어준다. [보충 이미지] AWS 솔루션 라이브러리 사전 구축된 참조 아키텍처이며 도메인 별로 활용될 수 있는 다양한 아키텍처를 확인할 수 있다. CloudFormation 파일을 제공하는 아키텍처들도 있다. AWS Systems Manager 실습 3: AWS VPC 인프라에 데이터베이스 계층 생성 [실습 아키 이…","frontmatter":{"categories":"AWS","title":"[AWS architect] 8. AWS 자동화","date":"July 06, 2022"},"fields":{"slug":"/aws-architect8/"}}},{"node":{"id":"c2bc1c3c-cef1-526f-894f-a72018a30736","excerpt":"AWS Cloudwatch AWS의 모든 자원은 cloudwatch에 의해서 모니터링 된다. CloudWatch Logs AWS CloudTrail AWS 인프라에서 계정활동을 로깅/모니터링 한다. CloudTrail 로그 예시 VPC 흐름 로그 [image] 송/수신 되는 ip 트래픽에 대한 정보를 모두 수집하여 볼 수 있다. 네트웍 트러블슈팅 시 사용됨 Kinesis Firehose 활용 -> Datadog, splunk Elasticsearch 와 같은 SaaS 연동하기에 용이함 사용자 정의 로그 logback에서 수집한 로그를 CloudWatch agent를 설치하여 연동함으로써 Amazon CloudWatch Logs로 전송할 수 있다. CloudWatch 경보 [417 image] Eventbridge ELB (elastic load balancing) L4/L7 역할, round-robin이 디폴트. 상태확인 수행하여 문제 있을 시 그 쪽으로 안 보냄 무조건 2개 이상…","frontmatter":{"categories":"AWS","title":"[AWS architect] 7. AWS Monitoring","date":"July 06, 2022"},"fields":{"slug":"/aws-architect7/"}}},{"node":{"id":"1ebd4c2a-bcd7-5949-bcce-c66b22da7bd2","excerpt":"개요 AWS 데이터베이스 솔루션은 무엇인가 클라우드에서 RDB를 더욱 효율적으로 관리할 수 있는 방법은 무엇인가 확장 가능한 key-value NoSQL을 구축하려면 어떻게 해야하는가? AWS 클라우드에서 데이터베이스를 캐시하는 방법은 무엇인가 기존 DB에서 AWS 클라우드로 마이그레이션 할 때 사용하는 도구는 무엇인가 RDB 및 NoSQL [image] 여러가지 AWS 데이터베이스 서비스 RDS, Aurora, DynamoDB외에도 Neptune등 많은 서비스가 있음\n크기 조정, 고가용성, DB백업, DB s/w 패치, 설치 OS 패치 등의 작업을 사용자가 직접할 필요 없음 크기 조정 시 blue-green deploy도 지원하여 서비스 다운타임도 없앴을 수 있음 RDS [이미지] RDS Multi AZ 배포 stanby instance를 primary instance와 다른 AZ에 두고, 동기화 복제를 사용한다. primary instance가 fail 되면 stanby가 바로…","frontmatter":{"categories":"AWS","title":"[AWS architect] 6. AWS Database 서비스","date":"July 06, 2022"},"fields":{"slug":"/aws-architect6/"}}},{"node":{"id":"c31e1383-65d0-5dd4-a546-f7be966cbaf8","excerpt":"개요 블록/파일/객체 스토리지를 검토할 때 고려해야 하는 서비스는 무엇인가? 사용 사례에 적합한 객체 스토리지 솔루션을 어떻게 선택하는가? AWS에서 안전하고 확장 가능한 보안 스토리지를 구축하기 위한 파일 기반 옵션은 무엇인가? 어떻게 하면 짧은 시간 내에 대량의 데이터를 클라우드로 이관할 수 있는가? 스토리지(다시 듣기) 스토리지는 일반적으로 3개의 타입으로 나뉜다. 블록 스토리지 원시 스토리지 데이터가 관련 없는 블록의 어레이로 구성된다. 읽기/쓰기 자유 하드디스크, SAN 파일 스토리지 NAS 객체 스토리지 블록/파일 스토리지와 달리 디스크에 마운트 되지 않는 솔루션이다. http요청에 의해서 쓴다. ‘비연결 기반’이기 때문에 확장성이 매우 높다. 저장된 객체에 대한 unique key가 존재한다. [254 이미지] Amazon S3 버킷을 만들 때 용량을 설정하지 않는다. 용량이 무제한임 버킷에 데이터를 넣으면 3개 이상의 가용영역에 데이터를 복제하여 매우 고가용성이다. …","frontmatter":{"categories":"AWS","title":"[AWS architect] 5. AWS Storage","date":"July 06, 2022"},"fields":{"slug":"/aws-architect5/"}}},{"node":{"id":"e8722820-33bd-534c-9d21-a4ab19ffe8a0","excerpt":"개요 EC2에 서버를 배포할 때 고려해야 할 사항이 무엇인가? EC2에 연결할 볼륨 유형을 어떻게 알 수 있는가?(EBS) 비용을 최적화 하는 방법은 무엇인가? 서버리스 컴퓨팅 옵션은 어디서부터 시작할 있는가? EC2 인스턴스 생성 시 고려사항 이름/태그 태그 룰 지정 : enterprise레벨에서는 중요햐다.\n[ 태그 룰 이미지 ] AMI(Amazon Machine Image) : OS image + 필요한 설정 enterprise 레벨에서는 기본 AMI에 보안 등의 설정을 추가하여 ‘사용자 지정 AMI’로 만들어서 사용한다. 인스턴스 유형 이해 [ 인스턴스 유형 이름 이미지 ] 인스턴스 패밀리 범용 : T3, M5 메모리 최적화 : R5 스토리지 최적화 : I3 컴퓨팅 최적화 : C5 가속 컴퓨팅 : G4, F1 인스턴스 세대 : 최신 세대를 쓰는 것이 오히려 비용이 더 줄어듬. 추가 속성 : g(graviton), a(amd) 등 인스턴스 크기 : xlarge, 2xlarge…","frontmatter":{"categories":"AWS","title":"[AWS architect] 4. Computing","date":"July 05, 2022"},"fields":{"slug":"/aws-architect4/"}}},{"node":{"id":"cb3f4453-6270-58ac-9535-dad62f83c7e7","excerpt":"개요 워크로드를 지원하기 위해 충분한 IP주소가 네트웍에 있는 지를 어떻게 확인하는가? AWS 계정에 안전한 동적 네트워크 인프라륵 구축하는 방법은 무엇인가? 네트워크의 리소스 보호를 위해 인/아웃바운드 트래픽을 필터링하는 방법은 무엇인가? IP 주소 지정 -> 워크로드를 지원하기 위해 충분한 IP주소가 네트웍에 있는 지를 어떻게 확인하는 하는가?\n\n-> 즉 데이터 센터를 얼마나 크게 지을 것인가와도 관련이 있다.\n\nip주소는 네트워크와 호스트를 식별한다. IPV4는 고갈되었기 때문에 NAT 대역을 사용하며 RFC1918규약에 따라 보통 10.대역, 192. ,172. 대역을 사용한다. CIDR ( classless inter-domain routing ) IP를 예전에는 클래스 단위로 나누었지만 해당 방법은 비효율적이어서 CIDR방법을 요즘에는 사용한다.\n VPC에서 지원되는 CIDR블록 /16 : 65536개 … /28 : 16개 VPC(Virtual Private Cloud)…","frontmatter":{"categories":"AWS","title":"[AWS architect] 3. Networking 기초","date":"July 05, 2022"},"fields":{"slug":"/aws-architect3/"}}},{"node":{"id":"90fe62d5-1590-54fb-9fa9-7182f9a34a75","excerpt":"보안 주체와 자격증명 보안주체란 AWS리소스에 대한 작업을 요청할 수 있는 엔티티 root user IAM user IAM group Role IAM 구성요소 User Group : user는 여러 그룹에 속할 수 있다. Policy : json으로 구성된 권한을 담은 document Role : 임시 권한 부여(안전모)할 떄 사용  보안 정책 IAM 자격증명 기반 정책 ( 열쇠 들고 따고 들어가는 유형 ) IAM리소스 기반 정책 ( 경비원이 문 열어주는 유형 ) IAM 자격 증명 기반 정책 자격 증명 기반 정책의 경우 아래와 같다.\n 서비스 액세스 AmazonEC2FullAccess AmazonEC2ReadOnlyAccess 직무 AdministratorAccess Billing 사용자 정의 정책 DiChaTeam … 자격증명 기반 정책은 다음과 같이 작성할 수 있다.\n IAM 리소스 기반 정책 리소스 기반의 정책은 S3버킷이나 Lambda함수와 같은 단일 리소스에 연결되며 어떤…","frontmatter":{"categories":"AWS","title":"[AWS architect] 2. Account & Security","date":"July 05, 2022"},"fields":{"slug":"/aws-architect2/"}}},{"node":{"id":"c7cf288e-ebd1-5d1a-a3ef-a04bbc706c8d","excerpt":"AWS 인프라 AWS는 2023년 7월 현재 전 세계 31개의 리전(region)을 지원하며, 각 리전은 최소 3개 이상의 가용영역(Availability zone)으로 이루어져 있다.\n각 가용영역은 1개 이상의 데이터 센터로 구성되어 있다. Region Availability zone Local zone Edge location 어떤 리전을 선택해야 하는가? 법규(governence) 지연시간(latency) 서비스(AWS service) : 리전 별로 지원하는 서비스 수가 다름 비용 : 예컨대 상파울로 리전은 브라질 현지 전기 사정이 안 좋아서 직접 발전기까지 돌리기 때문에 cost가 비쌈 로컬 존(Local zone) region을 만들기까지는 애매한 지리적 위치에 있는 사용자에게 낮은 latency로 서비스를 제공하고자 할 떄 사용된다.\n예컨대 Oregon region 안에는 LA의 로컬 존이 있다.(oregon<->LA거리 약 1000km)\nAWS에서는 LA가 별도 reg…","frontmatter":{"categories":"AWS","title":"[AWS architect] 1. Architecting 기초","date":"July 05, 2022"},"fields":{"slug":"/aws-architect1/"}}},{"node":{"id":"820c1cdc-b7af-52ad-8061-4e997e351a6f","excerpt":"기존에 MySQL 환경에서 1개 database로만 운영하던 서비스에 dev용 database를 추가하기 위해 DBeaver에서 dump하여 복사한 방법을 알아보자. 먼저 복사하려는 대상 db에서 우클릭하여 ‘dump database’를 선택한다.\n 그 후 정확한 DB와 모든 table들을 선택한 후 다음\n output 폴더를 지정해주고 local client를 설정해준 이후 ‘Start’ 버튼을 눌러 dump하면 끝이다.  그 후 dev용 database (나의 경우 onyou-dev) 를 생성한 다음 우클릭하여 Restore database를 선택한다.\n 기존 db에서 dump로 생성했던 sq을 선택하고 ‘Start’ 눌러주면 끝이다.","frontmatter":{"categories":"DB","title":"DBeaver에서 MySQL DB dump하여 복사하기","date":"July 01, 2022"},"fields":{"slug":"/mysql-dbeaver-dump/"}}},{"node":{"id":"e5a5c625-904e-51f6-a720-067c29631382","excerpt":"querydsl의 기본문법 중 조인, 서브쿼리, case문 등에 대해서 알아보자. 1. 조인 기본적으로 jpql의 조인과 같다. 연관관계가 없어도 querydsl에서 join을 할 수 있다. Join on 절 on절을 사용하면 조인할 대상을 줄여준다. 조인 대상 필터링 inner join일 경우는 on을 쓰는 것과 where에 조건을 더하는 것과 동일한 결과를 반환한다.\nleft join일 경우에는 없는 것도 left 부분은 가져오기 때문에 위와 같은 방법을 써주어야 한다.\n따라서 outer join이 필요한 경우에만 on필터링을 사용하자. 연관관계가 없는 엔티티 outer join 일반 조인 : leftJoin(member.Team, team) on 조인 : from(member).leftJoin(team).on(…) 2. Fetch 조인 페치조인은 SQL에서 제공하는 기능이 아니고 SQL 조인을 활용해서 연관된 엔티티를 SQL 한번에 조회하는 기능이다.\n성능 최적화를 위해 사용…","frontmatter":{"categories":"Spring","title":"[QueryDSL] 3. QueryDSL 기본문법 (2)","date":"June 10, 2022"},"fields":{"slug":"/querydsl3/"}}},{"node":{"id":"b51639ee-d028-5ac6-875c-b4157e861f8d","excerpt":"QueryDSL이 무엇인지와 환경설정하는 방법에 대해 배웠으니 이제 본격적으로 문법을 배워보자. 1. 기본 Q-Type 활용 querydsl 라이브러리가 생성한 Q 클래스를 살펴보면 아래와 같이 static 변수로 클래스에 대한\nQ객체를 생성해 둔 것을 확인할 수 있다. 따라서 우리가 querydsl을 사용할 때는 static import로 해당 객체를 불러와서 객체의 멤버 변수인 ‘member’를 사용하면\n아래와 같이 간결하게 코드를 짤 수 있다. 그리고 Spring에서 주입해주는 em 은 멀티쓰레드 환경에서 안전하도록 구성되어 있기 때문에 JPAQueryFactory는 동시성 문제를 고려하지 않고 따로 클래스의 필드로 빼서 사용하면 된다.\n멀티쓰레드 환경에서 현재 나의 transaction이 어디에 걸려있느냐에 따라 transaction에 바인딩 되도록 em을 분배해주기 때문이다.\n 2. 검색 조건 쿼리 querydsl은 JPQL이 제공하는 모든 검색조건에 대한 메소드를 제공한…","frontmatter":{"categories":"Spring","title":"[QueryDSL] 2. QueryDSL 기본문법 (1)","date":"June 09, 2022"},"fields":{"slug":"/querydsl2/"}}},{"node":{"id":"07225a26-452a-50a8-b7ed-3903a7f9b9bb","excerpt":"1. QueryDSL이란? QueryDSL은 Java 코드로 쿼리를 짜서 DB에 접근하는 방식이다. 기존 데이터 접근 방식인 jdbcTemplate, Mybatis 와 같은 방법에서는 직접 SQL 쿼리를 짜야만 했다. JPA에서는 Spring data jpa를 통해서 조회 조건이 간단한 쿼리 같은 경우에는 별도의 쿼리를 짜지 않고도 DB로부터 데이터를 불러 올 수 있었다. 그러나 복잡한 조회가 필요할 경우 불가피하게 JPQL을 통해서 아래와 같이 쿼리를 직접 짜야 했다. 그러나 QueryDSL을 사용하면 아래와 같이 자바코드의 형태로 쿼리를 짤 수 있고 여러가지 장점이 있다. 컴파일 타임에서 에러를 잡을 수 있다. 코드 자동 완성의 도움을 받을 수 있다. 동적쿼리를 편하게 짤 수 있도록 도움을 준다. 메소드를 뽑아 낼 수 있어 재사용이 가능하다. parameter 바인딩을 자동으로 해준다. Spring data JPA와 QueryDSL을 함께 활용하면 RDB를 사용한 개발환경에서\n…","frontmatter":{"categories":"Spring","title":"[QueryDSL] 1. QueryDSL이란? QueryDSL 환경설정 ","date":"June 05, 2022"},"fields":{"slug":"/querydsl1/"}}},{"node":{"id":"d4e6a6e4-e0b4-52de-85b7-736628dbf089","excerpt":"Spring boot 개발환경에서 AWS S3를 활용하여 파일을 업로드하고 이를 DB를 URL로 저장하는 방법과\n파일 명을 이용해서 S3로부터 파일을 다운로드 하는 방법에 대해서 알아보자. 1. Spring boot 의존성, 환경 설정 build.gradle app.properties 2. S3 Config 클래스 설정 위 application.properties에서 설정한 accessKey, secretkey, region값을 @Value 어노테이션을 활용하여\nAwsS3Config 클래스에서 가져와서 AWSCredential을 설정한다. 이 때 나는 jasypt를 활용해서 key값을 보호하도록 했는데 해당 내용은 이 글을 참고하자. 3. S3 업로드 Controller 설정 나는 본 글의 title처럼 Club이라는 entity를 생성할 때 S3에 썸네일 이미지가 업로드 됨과 동시에 DB에 S3에 업로드된 이미지의 URL도\n저장되도록 설정하도록 하였다. 그리고 그러기 위해서 @R…","frontmatter":{"categories":"AWS","title":"[AWS] Spring boot에서 AWS S3로 파일 업로드하면서 DB에 URL 저장하는 방법","date":"April 23, 2022"},"fields":{"slug":"/aws-s3/"}}},{"node":{"id":"9bf85671-8a17-5a6e-8503-65385d57a3c1","excerpt":"Spring boot 환경에서 AWS S3를 연동해서 사용하려고 하면, application.yml 또는 application.properties에 아\n래와 같이 accessKey, secretKey값을 설정해줄 것이다. 그런데 이렇게 설정을 하게 되면 AWS의 accessKey, secretKey값이 깃헙에 노출되는 문제가 발생한다. 이미 나는 그걸 모르고 별일 없겠지라는 안일한 생각으로 깃헙에 코드를 푸시했다가 이틀 만에 해킹(ㅠㅠ) 당하는 일을 겪어야 했다. 이틀 만에 80 달러 치를 썼더라 해커놈 ㅡㅡ 그러니 반드시 Jasypt를 활용해서 AWS key값을 암호화해서 올리시길 바란다. Jasypt : Java Simplified Encryption으로 암호화를 위한 Library이다. 보통 프로퍼티에 노출되는 중요 정보들을 암호화 해주는 용도로 사용한다. 1. 의존성 설정 ( build.gradle ) 나는 gradle을 사용하기 때문에 아래와 같이 간단한게 jasypt를 …","frontmatter":{"categories":"AWS","title":"[AWS] AWS key값을 Jasypt를 이용해서 보호하자","date":"April 15, 2022"},"fields":{"slug":"/aws-jasypt/"}}},{"node":{"id":"9d8e16d7-8f70-50bd-95f5-e78ca41b648f","excerpt":"운영하는 사이트에서 메일엔진 솔루션을 사용 중인데 메일엔진이 mail_queue라는 테이블에서 데이터를 긁어가서\n메일을 일괄 발송하는 방식이다. 그런데 갑자기 사이트에 장애가 발생해서 mail_queue 테이블에 데이터가 insert되지 않는 에러가 발생했다.\n에러의 내용은 아래와 같았다.\n 이 문제를 구글링 해보니 tibero에서 자동 형변환을 지원하지 않아서 NUMBER인 컬럼에 string을 insert 시도하는 것이 문제라고 하는데,\n뭔가 내 경우랑 맞지 않는 것 처럼 보였다. 그리고 로컬에서, 개발서버에서도 해당 에러가 재현되지 않고 디버깅을 찍어보아도 insert되는 데이터는 정상이었다. 문제는 바로 INSERT를 수행하기 전 key 값을 sql로 채번하는 것이었다.\nmail_queue 테이블의 PK인 메일 id( mail_id )값을 기존의 테이블의 mid값 중 max값을 불러와 여기에 1을 더한 뒤에 insert하는 데,\nDB의 mid값에 특수기호가 들어있던 것이 문…","frontmatter":{"categories":"Error","title":"[Error] insert시 select key 후 inesrt로 인한 에러 발생 조치 (JDBC-5074: Given String does not represent a number in proper format)","date":"March 28, 2022"},"fields":{"slug":"/error-insert/"}}},{"node":{"id":"cbd47f43-f6c1-584b-ba41-4fd008565526","excerpt":"Type definition error: [simple type, class stg.onyou.service.CursorResult]; nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class stg.onyou.service.CursorResult and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: stg.onyou.model.network.Header[“data”])“, RestController에서 return 시 객체를 json으로 serialize하는데, 이 때 객체의 멤버 중에 Getter가 없는 멤버 변수가 있어서…","frontmatter":{"categories":"Error","title":"[Error] Getter가 없어서 발생하는 JSON Serialize 에러","date":"March 27, 2022"},"fields":{"slug":"/error-json-serialize/"}}},{"node":{"id":"82e6428f-f8dc-5910-93fa-96947ef11565","excerpt":"1. JPA에서 프록시란 무엇인가? 1) em.find vs em.getReference em.find를 하게 되면 JPA가 실제 entity 객체를 반환하지만, em.getReference를 하게 되면 DB조회를 미루는 ‘프록시’ entity 객체를 반환한다. 프록시 객체는 실제 Entity 타깃 객체는 가지고 있지 않고, id값만 가지고 있는 비어있는 객체이다.  프록시 객체는 실제 Entity를 상속해서 만들어지며, Hibernate가 내부적으로 만든다. 실제 클래스와 겉 모양이 같기 때문에 사용하는 입장에서는 진짜 객체인지 프록시 객체인지 구분하지 않고 사용할 수 있다.  프록시 객체는 실제 객체의 참조(target)를 보관하고, 프록시 객체를 호출하면 프록시 객체는 실제 객체의 메소드를 호출한다. 이렇게 호출을 한다고 생각해보자. getName 호출하게 되면 MemberProxy객체에 target이 없기 때문에 JPA가 영속성 컨텍스트에 진짜 Member객체 가져오라고 초…","frontmatter":{"categories":"Spring","title":"[JPA] 8. JPA프록시와 지연로딩(Lazy Loading)과 즉시로딩(Eager Loading)","date":"March 24, 2022"},"fields":{"slug":"/jpa8/"}}},{"node":{"id":"fbbc48e9-077f-59a4-9a56-994f882876d3","excerpt":"JPA에서 엔티티 간에 다양한 연관관계를 매핑하는 방법에 대해서 알아보았다. 이제는 조금 더 나아가 단순히 다대다, 다대일만의 관계가 아니라 JPA에서 상속관계를 어떻게 매핑하는 지에 대해서 알아보고자 한다. 그런데 생각해보면 관계형 데이터베이스에는 ‘상속’이라는 개념이 객체지향과는 달리 존재하지 않는다. 그렇지만 이와 유사한 슈퍼타입, 서브타입 모델링 기법이 있는데, JPA에서는 이를 사용해서 객체의 상속관계를 DB의 슈퍼타입/서브타입 관계로 매핑시켜준다. \n 그리고 관계형 DB에서 슈퍼타입/서브타입 논리 모델링을 물리 모델링하고자 할 때 구현하는 방법은 크게 3가지이며\n이 3가지 방식 중 어떤 방식을 선택해도 JPA에서 연관관계 매핑을 지원한다. 1. 조인 전략 앨범 데이터 INSERT시 ITEM, ALBUM 테이블 각각에 데이터를 넣고 조회 시는 ITEM_ID로 ITEM, ALBUM을 조인해서 가져오는 방식이다. 이 때 ITEM 테이블에 어떤 서브타입인지를 구분하는 DTYPE…","frontmatter":{"categories":"Spring","title":"[JPA] 7. 상속관계 매핑 전략 (슈퍼타입, 서브타입)","date":"March 20, 2022"},"fields":{"slug":"/jpa7/"}}},{"node":{"id":"63bd45bc-1012-5983-9b4c-f4c1913af714","excerpt":"JPA에서 제공하는 다양한 연관관계 매핑하는 방법에 대해서 알아보기에 앞서,\n연관관계를 매핑할 때 고려해야 할 요소는 3가지임을 기억하자. 다중성 @ManyToOne -> 제일 많이 사용된다. @OneToMany -> 사용할 수는 있지만 ManyToOne의 양방향으로 커버 가능하다. @OneToOne -> 가끔 @ManyToMany ->실무에서 안 씀 단방향인가 양방향인가 연관관계의 주인이 어느 쪽인가 1. 다대일( ManyToOne ) 다대일 관계는 가장 많이 사용되는 관계이다. 사실 상 거의 이것으로만 설계할 수 있다. 다대일 관계의 특징은 FK를 ‘다’ 쪽에서 관리하는 것이고, 연관관계의 주인도 ‘다’ 쪽이라는 것이다. 1. 단방향  2. 양방향 설계는 다대일 단방향에서 끝났지만 만약에 Team 에서도 Member에 대한 조회를 하고 싶다면 OneToMany를 ‘일’ 쪽인 Team에 추가하여 매핑해주면 된다. 연관관계의 주인은 Member이므로 조회만 된다는 점에 유의하자. …","frontmatter":{"categories":"Spring","title":"[JPA] 6. 다양한 연관관계 매핑","date":"March 16, 2022"},"fields":{"slug":"/jpa6/"}}},{"node":{"id":"c7e517d4-5e33-5d3e-8aa2-451e7b99ae12","excerpt":"JPA 연관관계 매핑을 배우기에 앞서, 객체와 테이블의 연관관계를 맺는 방법이 다르다는 것을 이해해야 한다.\nJPA 1. 에서 언급했듯이, 객체는 참조를 통해, 테이블은 FK를 통한 조인으로 연관관계를 맺는다. 회원과 팀이 다대일 관계일 때 객체를 테이블에 맞추어 모델링 한다면 아래와 같을 것이다.  그리고 이렇게 Entity 상에서 이렇게 매핑을 하게 되면 서로 연관된 데이터를 가져오고 싶을 때 이렇게 Id를 통해서만 가져올 수 있게 된다. 그리고 이것은 객체지향스럽지 않은 방식이다.\nJPA에서는(ORM에선) 이를 어떻게 모델링 할 수 있을까?\nJPA에서는 단방향, 양방향 연관관계를 통해 객체지향적으로 프로그래밍이 가능하도록 해준다. 1. 단방향 연관관계  Entity 클래스에서 참고하고자 하는 다른 Entity 클래스의 참조형을 멤버변수로 선언하는데,\n이 때 참조형으로 생성하는 Entity는 FK를 가지고 있지 않은 쪽 ( ‘Many’ 인 쪽 ) 이다.\n즉 Team과 Membe…","frontmatter":{"categories":"Spring","title":"[JPA] 5. 연관관계 매핑 (feat. 연관관계의 주인)","date":"March 12, 2022"},"fields":{"slug":"/jpa5/"}}},{"node":{"id":"d55f696e-f426-568d-a0cf-2ec92a0ff11c","excerpt":"JPA의 내부동작, 즉 영속성 컨텍스트의 정의, 장점, 라이프사이클 등에 대해서\b 이전 글을 통해 알아 봤다면,\n이제 Entity 매핑을 실제로 어떻게 하는 지를 알아보자. 1. 객체와 테이블 맵핑 ( @Entity, @Table ) @Entity가 붙은 클래스는 JPA가 관리하게 된다. Entity 작성 시 주의사항 기본 생성자는 필수이다. final, enum, interface, inner 클래스 사용 X 저장할 필드에 final 사용 X @Table은 엔티티와 맵핑할 테이블 지정 가능 2. DB 스키마 자동 생성 JPA에서는 DDL을 앱 실행 시점에 자동 생성해준다. ( 운영 환경에서는 사용하면 안됨 ) : JPA가 테이블 중심이 아닌 객체 중심임을 보여준다. persistence.xml에서 아래와 같이 옵션이 설정되어 있어야 한다. 여기서 value값에 옵션을 지정해주는데 옵션의 종류는 아래와 같다. create : 기존테이블 삭제 후 다시 생성(DROP + CREATE)…","frontmatter":{"categories":"Spring","title":"[JPA] 4. 엔티티(Entity) 매핑 기초","date":"March 08, 2022"},"fields":{"slug":"/jpa4/"}}},{"node":{"id":"594c5566-4632-5c70-9fdd-731673898ad2","excerpt":"지난 글에서는 JPA 프로그래밍시, EntityManager를 생성하여 persist, set 등의 CRUD 작업을 수행하는 것을 알아보았다.\n지난 글에선 설명하지 않았지만 EntityManager가 데이터를 persist 하게 되면 데이터는 ‘영속성 컨텍스트’에 저장되게 된다.\nJPA에서 가장 중요한 것은 객체와 관계형 DB의 맵핑 문제, 그리고 영속성 컨텍스트이다. 영속성 컨텍스트란? 영속성 컨텍스트를 이해하기에 앞서, EntityManager(이하 EM)와 EntityManagerFactory(이하 EMF)가 동작하는 방식에 대해서 먼저 이해해야 한다. EMF는 고객의 요청이 올 때 마다 EM을 생성하고 EM은 내부적으로 DB 커넥션을 사용해서 DB를 사용한며, 이를 도식화하면 아래와 같다.  그렇다면 영속성 컨텍스트란 무엇인가? “Entity를 영구 저장하는 환경”이라는 뜻이다.\n영속성 컨텍스트는 논리적인 개념이며 또한 EM과 1대1로 대응하고, EM을 통해 접근/관리 한다…","frontmatter":{"categories":"Spring","title":"[JPA] 3. JPA 내부동장 방식 : 영속성 관리","date":"February 27, 2022"},"fields":{"slug":"/jpa3/"}}},{"node":{"id":"cf7c4b45-6af5-5d3a-8a18-4dfd633f5624","excerpt":"JPA 구동 방식 JPA는 아래와 같은 방식을 통해 동작한다.  EntityMangerFactory는 하나만 사용해서 앱 전체에서 공유해서 사용하며 EntityManager는 thread간에 공유해서는 안된다. 그리고 JPA의 모든 데이터 변경은 트랜잭션 안에서 실행해야 한다. ​\n\n순수 JPA만 설정했을 때 어떤 식으로 프로그래밍을 하게 되는 지 아래 코드를 통해서 살펴보자. EntityManagerFactory를 생성하고, 이를 통해 EntityManager도 생성한다. JPA의 모든 데이터 변경은 트랜잭션 안에서 실행되야 하기 때문에 EntityTransaction 객체를 생성하여 tranasaction의 begin, end를 관리해주어야 한다. ​\n아래 코드에서 순수 Jpa 프로그래밍을 어떻게 하는 지 알 수 있다. 특히 jpa에서 제공하는 수정 기능을 보면 jpa를 사용하면 정말 객체지향적으로 프로그래밍할 수 있음을 알 수 있다. setName 메소드를 통해서 Entity…","frontmatter":{"categories":"Spring","title":"[JPA] 2. JPA 구동방식과 JPQL의 개념","date":"February 25, 2022"},"fields":{"slug":"/jpa2/"}}},{"node":{"id":"1efc6b11-8b4b-513b-8a7e-5acd2c7ee5b3","excerpt":"오늘 날 DB를 사용한다고 할 때 아직까지 대부분은 NoSQL보다는 RDB라고 불리는 관계형 데이터베이스를 사용한다.\n즉, 개발자는 프로그래밍을 할 때 객체를 DB에 저장하는 작업, 반대로 DB를 객체로 불러오는 작업을 반복해야 만 했다.\n개발자가 사실 상 SQL mapper 역할을 했어야만 했다는 것을 말한다. 실제 국내에서는 수 많은 개발업체들과 SI업계에서는 여전히 Mybatis를 사용하며 SQL에 대부분의 비즈니스 로직이 녹아 있다. 그렇다면 이러한 SQL 중심적 개발에는 어떤 문제가 있을까?\n쉽게 생각할 수 있는 것은 SQL을 직접 짜는 것이 매우 귀찮은 반복적 작업이라는 것.\n예컨대 필드가 추가 되면 INSERT, UPDATE, SELECT등 모든 SQL에 해당 필드가 들어가야 하는 곳을 찾아서 추가해주어야 할 것이다. 그러나 무엇보다도 RDB(관계형 데이터베이스)와 OOP(객체지향 프로그래밍)의 패러다임 불일치에서 오는 문제들이다. 패러다임의 불일치 관계형 DB가 나온…","frontmatter":{"categories":"Spring","title":"[JPA] 1. SQL 중심적 개발의 문제와 JPA","date":"February 24, 2022"},"fields":{"slug":"/jpa1/"}}},{"node":{"id":"2bd91624-2e16-57df-8644-52512602846c","excerpt":"OAuth는 어떤 시스템에서 그 시스템의 사용자들이 Google, Facebook, KaKao talk과 같은 서비스에 직접 연결하지 않고도 시스템을 통해 각 서비스(Google,Facebook등) 의 기능을 이용하고 싶은 욕구로 인해 등장한 개념이다.\n 이 때 시스템이 사용자들의 서비스 계정정보를 모두 가지고 있다면 해당 문제가 쉽게 해결 되겠지만, 그것은 보안 상 매우 취약한 방법이다. 왜냐하면, 사용자 입장에서는 처음 보는 시스템에 자신의 카카오 계정정보를 맡겨야 되는 것이고, 시스템 입장에서도 사용자들의 카카오 계정정보를 가지고 있는 것 자체가 부담이다. 서비스 입장에서도 자신들의 사용자 정보를 신뢰할 수 없는 ‘시스템’에게 맡기는 것은 말도 안된다. 그래서 우리에겐 OAuth가 필요하다.​ OAuth에는 앞서 말한 것처럼 사용자, 시스템, 서비스 3가지의 주체가 있고, OAuth에서는 이를 각각 Resource owner(사용자), Client(시스템), Resource …","frontmatter":{"categories":"WEB","title":"OAuth 란? OAuth 개념 및 동작원리(feat. 생활코딩)","date":"February 23, 2022"},"fields":{"slug":"/oauth/"}}},{"node":{"id":"e06ddfc4-adba-56ce-9603-9882e0a9756b","excerpt":"Spring boot를 사용해서 사이드 프로젝트를 하던 중에 다른 개발자들과의 협업을 위해 API를 문서화시키는 것에 대한 필요성이 있었는데 Swagger를 사용하여 별도의 문서 작성없이 소스상의 간단한 설정을 통해 API 문서 자동화를 구현했다. API 문서 자동화 방법은 아주 간단한데, Gradle의 경우 아래를 \bbuild.gradle의 dependenceis에 추가해주면 된다. Maven의 경우 아래를 pom.xml에 dependency에 추가해주면 된다. 이렇게만 하면 되는데, Spring boot 2.6 버전을 쓰는경우에는 NPE가 발생할 수 있다. Spring에서 디폴트로 PathPattern-based matching을 사용하는데,\nSpringfox에서는 Ant-based path matcher가 사용되는 것으로 가정하고 있기 때문에 문제가 발생한다고 한다(https://stackoverflow.com/questions/70036953/springboot-2-6-0-…","frontmatter":{"categories":"Spring","title":"Spring Swagger 사용하여 API 문서 자동화하기","date":"February 19, 2022"},"fields":{"slug":"/spring-swagger/"}}},{"node":{"id":"45a45b35-56d7-5384-a2c1-a68ec09b63c9","excerpt":"어노테이션이란 무엇인가? 어노테이션은 자바에서 compile, run타임 시 코드를 어떻게 처리할 것인 지에 대한 메타데이터라고 볼 수 있다. 어노테이션의 목적 컴파일러에게 문법 에러를 체크하기 위한 정보 제공 (ex. @Override ) 개발 툴에서 코드를 자동으로 생성할 수 있는지 정보 제공 런타임 시 특정 기능을 실행하기 위한 정보 제공 ( ex. @Controller) 커스텀 어노테이션 만들기 선언 아래와 같이 MyAnnotation을 간단하게 생성할 수 있다. Element 멤버 외부의 값을 입력받을 수 있게 하는 역할 element 선언 아래와 같은 형태로 element 타입, 이름, default값을 설정하여 선언할 수 있다.\n물론 default 값은 생략 가능하다. 그리고 이 어노테이션을 외부에서 쓸 때, 아래와 같이 element값을 지정할 수 있다. 기본 element : value 어노테이션에는 value라는 기본 element가 존재하며 아래와 같이 설정할 …","frontmatter":{"categories":"Java","title":"[Java] 어노테이션이란(Annotation)? 커스텀 어노테이션을 만들어 보자","date":"February 17, 2022"},"fields":{"slug":"/annotation/"}}},{"node":{"id":"e1913b7f-e5c0-52f8-8cb2-0ffa026cee00","excerpt":"State 패턴에 대한 UML을 보자마자 든 생각은 ‘어? 이거 Strategy 패턴과 똑같은데?’ 라는 생각이었고, State 패턴에 대한 설명을 듣고 나서 든 생각은 ‘어? 이거 옛날에 Logic design 수업에서 배운 FSM(Finite State Machine)과 비슷하네?’ 라는 생각이었다.\n그리고 실제로 FSM 개념을 프로그래밍적으로 구현한 것이 State패턴이다. UML은 Strategy패턴과 사실상 같다고 볼 수 있다.\nContext 클래스에서 State interface 객체를 가지고 있고, State과 관련된 행동을 State class에게 위임한다. \n 그렇다면 Strategy와 다른 점은 무엇일까? Strategy 패턴은 공통적 성격이 있는 여러가지 기능을 특정 메소드에서 모드에 따라 다르게 실행되도록 하는 것이라면, State 패턴에서는 특정 메소드가 실행될 때 모드에 따라 다르게 실행되는 점은 동일하지만, 특정 조건에서 모드를 전환시킨다는 점에서 다르다…","frontmatter":{"categories":"디자인패턴","title":"[디자인 패턴] 3.State 패턴","date":"February 12, 2022"},"fields":{"slug":"/design-pattern-state/"}}},{"node":{"id":"840157c6-ecff-56f7-85ef-eb0308fa3632","excerpt":"Strategy(전략) 패턴의 정의와 UML은 아래와 같다. “여러가지 알고리즘을 하나의 추상적인 접근점(interface)을 만들어 접근점에서 교환 가능하도록 하는 패턴을 Strategy 패턴이라고 한다”  Strategy 패턴을 이해하기 위해서는 먼저 interface에 대한 이해, 그리고 delegation에 대한 이해가 필요하다. interface는 객체지향 프로그래밍에서 기능에 대한 선언과 구현을 분리하며 기능을 사용하기 위한 통로를 제공한다 Delegation은 특정 객체의 기능을 사용하기 위해 다른 객체의 기능을 호출하는 것을 말한다. 아래 코드를 보면 금방 이해가 될 것이다. 이제 interface와 delegation에 대해 이해 했으니 다시 돌아가서 Strategy 패턴이 무엇인지 예를 통해 알아보자. 예제 : 게임 캐릭터의 공격 구현 전략 이제 이를 사용하는 게임 캐릭터 클래스를 만들어 보자. GameCharacter 클래스에서는 외부에서 ‘장착’ 시켜준 wea…","frontmatter":{"categories":"디자인패턴","title":"[디자인 패턴] 2.Strategy 패턴","date":"February 11, 2022"},"fields":{"slug":"/design-pattern-strategy/"}}},{"node":{"id":"d350fa6c-4b34-530c-b3d0-972493169349","excerpt":"싱글톤 패턴의 정의와 UML은 아래와 같다. “소프트웨어 디자인 패턴에서 싱글턴 패턴(Singleton pattern)을 따르는 클래스는, 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴한다. 이와 같은 디자인 유형을 싱글턴 패턴이라고 한다”  다르게 말하면 프로세스가 실행될 때 한 번만 메모리를 할당하고 해당 메모리에 인스턴스를 만들어서 전역에서 공유하기 위한 패턴이다. 클래스에 딱 하나의 인스턴스만 존재해야 되고, 어플리케이션 전역적인 접근이 필요한 경우에 이를 사용한다. 정의에서는 ‘생성자가 여러 차례 호출되더라도’ 라고 표현했지만, 실제 싱글톤 클래스(A 클래스라고 하자)를 구현할 때는 애초에 외부에서 인스턴스를 생성할 수 없도록 생성자를 private으로 두고, 클래스 안에서 A를 타입으로 하는 static 변수에 static 메소드인 getInstance 메소드를 통해 인스턴스를 생성하…","frontmatter":{"categories":"디자인패턴","title":"[디자인 패턴] 1.Singleton 패턴","date":"February 10, 2022"},"fields":{"slug":"/design-pattern-sigleton/"}}},{"node":{"id":"285f12d9-8046-5f66-86df-9c9320f81003","excerpt":"로컬에서 Github repo 로 push 할 때 이제는 깃헙계정 패스워드가 아닌 Personal access token을 입력하도록 한다. 근데 매번 이걸 입력하기는 너무 귀찮으니, personal access token을 발급 받아 로컬 키체인에 저장해두면 된다. personall access token 발급은 계정 setting - developer setting - personal access token 에서 generate하면 된다. 해당 토큰은 디바이스 별로 하나씩 생성하는 것이 좋을 듯하다. 나 같은 경우는 아래와 같이 ‘mac’ 이란 이름으로 토큰을 만들었고 repo에 대한 권한만 주었다.  그 후 command + space 하여 ‘keychain Access’ 를 열어서 아래와 같이 깃헙의 주소와 나의 깃헙 계정명을 적은 후 암호 란에 토큰 값을 복붙해주면 된다.  마지막으로 맥 터미널을 열어서 아래 명령어를 통해 키체인을 로컬 git에 등록해주면 끝이다.","frontmatter":{"categories":"Git","title":"[Git] Personal access token 이용하여 github remote 인증하기  in Mac","date":"February 09, 2022"},"fields":{"slug":"/git-access/"}}},{"node":{"id":"385f5e04-75dc-546b-bf37-19032cb99613","excerpt":"AEM 을 소개함에 있어 해당 과정은 Udemy의 https://www.udemy.com/course/adobe-experience-manager-63 과정을\n영어가 어려운 사람들을 위해 한국어로 정리하는 데 목적이 있음을 밝힌다. AEM 관련해서 체계적으로 정리해둔 블로그를 찾지 못했기 때문이기도 하다. AEM 소개 AEM은 ‘Adobe Experience Manager’ 의 약어이며, 어도비 사에서 만든 Java 기반의 CMS 솔루션이다.\nAEM은 상용 웹 사이트를 만드는 데 많이 사용되며 웹 사이트의 콘텐츠와 asset 들을 관리하기에 용이하며 배포까지 지원한다. 웹사이트와 CMS 웹 사이트에는 3가지 종류가 있다. Static 웹 사이트\n: 정적 리소스로만 이루어진 웹 사이트이다. Dynamic 웹 사이트\n: 클라이언트/서버의 스크립트를 통해 동적으로 웹 사이트의 콘텐츠를 관리하는 웹 사이트이다. CMS template을 생성할 수 있다 재사용 가능한 Component를 생…","frontmatter":{"categories":"WEB","title":"[AEM] Adobe Experience Manager","date":"February 07, 2022"},"fields":{"slug":"/aem1/"}}},{"node":{"id":"c2fcb249-3189-5828-b2e1-d04bc2273100","excerpt":"1. AWS에서 프리티어로 EC2와 RDS 발급하기 1) EC2 인스턴스 발급 AWS 에 들어가서 EC2 인스턴스 생성하기로 가서 생성하면 된다. 프리티어로 발급 가능한 인스턴스를 발급 받았다. 발급 시 신경 써 주어야 할 부분은 프리티어에서 사용 가능한 최대 스토리지 설정(30GB)과 보안그룹에서 규칙을 설정하는 것이다. 보안그룹을 설정하지 않으면 생성한 EC2 서버로 모든 통신이 불가능하기 때문에 필요한 port와 사용자에 대해 꼭 설정해주어야 함! 나는 Front/Back-end를 위해 각각 3000,8080포트를 모든 사용자에게 허용하고 http,https를 통한 접근 허용을 위해 80,443 포트도 열어두었다. 2) EC2 ssh 접속 테스트 Windows에선 putty 설치해서, Mac에선 ssh 커맨드라인 툴을 이용해서 ssh priavte key를 사용해서 접속하면 된다.\n계정명은 ubuntu로 초기 로그인이 되며 su 명령어를 통해 root로 유저를 변경하여 roo…","frontmatter":{"categories":"AWS","title":"Spring boot 개발환경 설정 (gradle,JPA,MySQL,EC2,RDS)","date":"February 04, 2022"},"fields":{"slug":"/spring-boot-aws-environment/"}}},{"node":{"id":"a4372864-4ae0-5bc1-8534-1f5c8d770858","excerpt":"Http Status Code 제어 REST API를 통해 User를 생성하는 API를 만드는 상황을 가정해보자.\n좀 더 나은 API 설계를 고려한다면 단순히 User를 생성만 하는 것에서 그칠 것이 아니라 요청자에게 response로 결과 데이터를 반환해주어야 할 것이다.\n가령 사용자에게 요청 값을 반환해 주기 위해 ServletUriComponentsBuilder 라는 클래스를 사용할 수 있다. 이렇게 하면 클라이언트는 Header로부터 200을 받는 것이 아니라 201 created 값을 반환받을 수 있게 되며\nheader의 Key값 중 location값에서 POST의 URI value를 알 수 있다. 여기선 http://localhost:8080/users/10 이 될 것이다. 이렇듯 200 OK로만 보내는 것이 아니라 CRUD에 따라, 그리고 여러가지 상황에 따라 서로 다른 HTTP status code값으로 응답해주는 것이 좋고, location값을 반환 해 줌에 따라 …","frontmatter":{"categories":"WEB","title":"[REST API] HTTP Status Code 제어와 예외 해들링(Exception handling)","date":"February 04, 2022"},"fields":{"slug":"/rest-httpcode-exception/"}}},{"node":{"id":"24a3b461-7734-58bd-b6f8-fd563441bf60","excerpt":"Spring을 이용해서 개발을 시작한다고 할 때 대부분의 개발자들은 Spring boot를 이용할 것이다.\nSpring boot를 활용하게 되면 Spring 사용 시 필요한 여러가지 귀찮은 configuration들을 자동으로 설정해줄 뿐만 아니라 개발자비즈니스 로직 개발에 집중할 수 있도록 여러가지 기능을 제공한다. Spring boot란 무엇인가? 간략하게 정의하면 Spring boot는 Spring framework 을 더 쉽게 사용할 수 있게 해주는 framework로 보면 된다.\nSpring은 사용하기 위해 필요한 설정 들이 생각보다 복잡한데, Spring boot는 기본적으로 이러한 설정들을 모두 제공하기 때문에,\n개발자 입장에서는 초기 개발 환경을 셋팅하는 것이 매우 용이해진다. Spring boot 공식 문서는 다음과 같이 말한다.\n Spring Boot makes it easy to create stand-alone, production-grade Spring ba…","frontmatter":{"categories":"Spring","title":"[Spring] Spring boot는 무엇을 해주는가? 스프링 부트를 쓰는 이유","date":"February 02, 2022"},"fields":{"slug":"/why-spring-boot/"}}},{"node":{"id":"cf070829-56f4-5c82-91d9-9f58da57a714","excerpt":"h2를 설치해서 bin폴더 내에서 ./h2.sh를 실행했으나 permission denied로 뜸. -> chmod 755 h2.sh 또는 chmod +x h2.sh를 통해 해당 파일에 실행권한 부여. ./h2.sh 하니깐 웹 브라우저 상에서 실행되었으나 아래와 같이 연결할 수 없다고 나옴.  url중 ip부분을 localhost:8082로 변경하고 테스트하면 아래와 같이 잘 나오는 걸 확인할 수 있었다.","frontmatter":{"categories":"Error","title":"[Error] h2 데이터베이스 실행 문제 in mac","date":"February 01, 2022"},"fields":{"slug":"/error-h2/"}}},{"node":{"id":"07ed92a9-c988-5589-818d-86ca46d64f9f","excerpt":"REST와 대비하여 자주 언급되는 SOAP이라는 개념이 있다. SOAP이란 무엇인가? Simple Object Access Protocol의 약자로서 http,https,smtp를 이용하여 XML메시지로 통신을 가능하게 해주는 프로토콜을 말한다. 아래 그림과 같이 XML로 request를 보내고 XML로 response를 받는다. \n\n그리고 그 XML 메시지의 구조는 아래와 같이 Envelope, Header, Body의 세 부분(+Fault 부분 option)으로 이루어져 있다.\n \n 실제 SOAP의 메시지 구조를 살펴보면 아래와 같다. 전달하고자 하는 내용에 비해 부가적인 태그나 설정 관련 텍스트가 많아서 통신 시 불필요한 오버헤드가 발생할 뿐만 아니라 개발 하기에 까다롭기도 하다. SOAP vs REST SOAP과 REST\b의 차이점을 아주 잘 보여주는 표가 있어서 가져와보았다. SOAP와 REST의 공통점이라고 한다면 HTTP,HTTPS를 통해 데이터를 통신한다는 점이지만 …","frontmatter":{"categories":"WEB","title":"SOAP에 대한 이해. SOAP이란 무엇인가? (feat. REST vs SOAP ) ","date":"January 31, 2022"},"fields":{"slug":"/soap/"}}},{"node":{"id":"765d6775-2762-5c68-9380-d540e39b2806","excerpt":"Spring에서 의존관계 주입(Dependency Injection)을 할 때 @Autowired를 사용하여 주입하는 경우가 많은데,\n스프링에서는 아래와 같이 그렇게 하지 말 것을 권고한다. Field injection is not recommended … Always use constructor based dependency injection in your beans DI를 하는 이유는 객체 내부에서 객체를 직접 생성하는 방식 보다 런타임 시 외부에서 생성한 객체를 인터페이스를 통해 넘겨받는 것이 더 느슨한 결합 방식이기 때문이다. DI 방법 3가지 1. Setter based injection (수정자 주입) 위와 같이 Setter를 통해 주입하는 방식의 경우 Controller 객체가 생성될 때 반드시 service가 초기화 되지 않아도 되기 때문에, NPE 발생 가능성이 존재한다. 그리고 생성자 주입과 필드 주입 방식은 ‘객체가 생성되는 시점’에서 순환 참조가 되는 지 여부…","frontmatter":{"categories":"Spring","title":"[Spring] Autowired가 아닌 생성자 주입을 사용해야 하는 이유","date":"January 28, 2022"},"fields":{"slug":"/spring-dependency-injection/"}}},{"node":{"id":"bc0477a1-feaf-5362-827e-58fe259bc923","excerpt":"React native 프로젝트에서 npm run android 했을 때 .zshrc에 Android root 설정했음에도 SDK location not found가 나오는 경우,\nproject root/android/에 local.properties 를 생성해서 아래 행을 추가 해주면 된다 . Mac : sdk.dir=/Users/{user_name}/Library/Android/sdk Windows : sdk.dir=c:\\Users{user_name}\\AppData\\Local\\android\\adk ​","frontmatter":{"categories":"Error","title":"[Error] React native SDK location not found","date":"January 26, 2022"},"fields":{"slug":"/error-rn-sdk/"}}},{"node":{"id":"9be327b3-05f1-5dd0-96b0-aff9f1f38ffb","excerpt":"User와 Feed의 다대다 관계 매핑을 위해 ‘Like’라는 이름의 Entity를 만들었는데, like가 MySQL에서 사용하는 예약 키워드이다 보니\nSyntax 에러가 발생했던 것. 해결책 : Like 대신 다른 이름을 사용하자. 그리고 엔티티명으로 예약어를 사용하는 것을 조심하자. MySQL 의 예약어들은 아래와 같다. ​","frontmatter":{"categories":"Error","title":"[Error] JPA MYSQL \"You have an error in you SQL syntax\"","date":"January 26, 2022"},"fields":{"slug":"/error-jpa-keyword/"}}},{"node":{"id":"79f31ae3-dbbe-5ef8-9900-dd9942dc8f04","excerpt":"REST에 대해서 웹 문서들을 살펴보면 여러가지 표현들로 설명하고 있는데, 그것을 조합해서 내가 이해하기 쉽게 정의하자면 아래와 같다. “REST API란 HTTP Method를 사용하여 HTTP URI 형태로 명시된 리소스를 처리(CRUD) 하도록 설계된 클라이언트와 서버 간의 통신 방식이다”  클라이언트가 GET, POST, PUT, DELETE 등의 HTTP 메소드를 통해 URI로 서버에 요청하게 되면 서버는 해당되는 리소스에 대한 CRUD를 처리하고 클라이언트에 JSON 데이터를 반환한다. REST API의 구성 요소 1. Resource : REST에서는 resource의 정보를 표현할 수 있어야 하며 이를 위해 URI를 사용한다. 2. Method : resource에 대한 행위를 표현하며, HTTP의 GET(조회), POST(추가), PUT(수정), DELETE(삭제) 메소드를 사용한다. 3. Representaion : REST에서 representation(표현)이…","frontmatter":{"categories":"WEB","title":"REST API란 무엇인가? REST API 제약조건, 실용적인 REST API 설계 방법 ( feat. RESTful하다는 것 )","date":"January 25, 2022"},"fields":{"slug":"/rest-api/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"Jplus","bio":{"role":"개발자","description":["Steady and Slow"],"thumbnail":"logo_color.jpg"},"social":{"github":"https://github.com/jjunyong","linkedIn":"","email":"sjm3bro@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}